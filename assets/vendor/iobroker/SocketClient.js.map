{"version":3,"file":"SocketClient.js","sourceRoot":"","sources":["../../src/SocketClient.ts"],"names":[],"mappings":"","sourcesContent":["import type { IOEmitEvents, IOListenEvents } from './SocketEvents.js';\r\n\r\nexport type ListenEventHandler =\r\n    // Add more overloads as necessary\r\n    | ((arg1: any, arg2: any, arg3: any, arg4: any, arg5: any) => void)\r\n    | ((arg1: any, arg2: any, arg3: any, arg4: any) => void)\r\n    | ((arg1: any, arg2: any, arg3: any) => void)\r\n    | ((arg1: any, arg2: any) => void)\r\n    | ((arg1: any) => void)\r\n    | ((...args: any[]) => void);\r\n\r\nexport type EmitEventHandler =\r\n    // Add more overloads as necessary\r\n    | ((arg1: any, arg2: any, arg3: any, arg4: any, arg5: any, callback?: (...args: any[]) => void) => void)\r\n    | ((arg1: any, arg2: any, arg3: any, arg4: any, callback?: (...args: any[]) => void) => void)\r\n    | ((arg1: any, arg2: any, arg3: any, callback?: (...args: any[]) => void) => void)\r\n    | ((arg1: any, arg2: any, callback?: (...args: any[]) => void) => void)\r\n    | ((arg1: any, callback?: (...args: any[]) => void) => void)\r\n    | ((...args: [...any[], (...args: any[]) => void]) => void)\r\n    | ((...args: any[]) => void);\r\n\r\n// export type ListenEventHandler = (...args: any[]) => void;\r\n\r\n// export type EmitEventHandler = (\r\n// \t...args: any[],\r\n// \tcallback?: (...args: any[]) => void,\r\n// ) => void;\r\n\r\n// ^ not sure why we cannot type these with tuple-typed arguments, but whatever...\r\nexport interface ConnectOptions {\r\n    /** Timeout for answer for ping (pong) */\r\n    pongTimeout?: number;\r\n    /** Ping interval */\r\n    pingInterval?: number;\r\n    /** connection request timeout */\r\n    connectTimeout?: number;\r\n    /** Authentication timeout */\r\n    authTimeout?: number;\r\n    /** Interval between connection attempts */\r\n    connectInterval?: number;\r\n    /** Every connection attempt the interval increasing at options.connectInterval till max this number */\r\n    connectMaxAttempt?: number;\r\n}\r\n\r\nexport interface SocketClient<\r\n    TListenEvents extends Record<keyof TListenEvents, ListenEventHandler> = Record<string, never>,\r\n    TEmitEvents extends Record<keyof TEmitEvents, EmitEventHandler> = Record<string, never>,\r\n> {\r\n    connect(url?: string, options?: ConnectOptions): void;\r\n    close(): void;\r\n    destroy(): void;\r\n\r\n    readonly connected: boolean;\r\n\r\n    on<TEvent extends keyof IOListenEvents>(event: TEvent, callback: IOListenEvents[TEvent]): void;\r\n    on<TEvent extends keyof TListenEvents>(event: TEvent, callback: TListenEvents[TEvent]): void;\r\n    off<TEvent extends keyof IOListenEvents>(event: TEvent, callback: IOListenEvents[TEvent]): void;\r\n    off<TEvent extends keyof TListenEvents>(event: TEvent, callback: TListenEvents[TEvent]): void;\r\n\r\n    emit<TEvent extends keyof TEmitEvents>(event: TEvent, ...args: Parameters<TEmitEvents[TEvent]>): boolean;\r\n    emit<TEvent extends keyof IOEmitEvents>(event: TEvent, ...args: Parameters<IOEmitEvents[TEvent]>): boolean;\r\n}\r\n"]}