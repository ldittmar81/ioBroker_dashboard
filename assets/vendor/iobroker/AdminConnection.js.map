{"version":3,"file":"AdminConnection.js","sourceRoot":"","sources":["../../src/AdminConnection.ts"],"names":[],"mappings":"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","sourcesContent":["import { Connection, ERRORS, type RequestOptions } from './Connection.js';\r\nimport type { ConnectionProps } from './ConnectionProps.js';\r\nimport type {\r\n    AdminEmitEvents,\r\n    AdminListenEvents,\r\n    CompactAdapterInfo,\r\n    CompactHost,\r\n    CompactInstalledInfo,\r\n    CompactInstanceInfo,\r\n    CompactRepository,\r\n    CompactSystemRepository,\r\n    License,\r\n    LogFile,\r\n} from './SocketEvents.js';\r\nimport { getObjectViewResultToArray, normalizeHostId, objectIdToHostname } from './tools.js';\r\n\r\ninterface Certificate {\r\n    name: string;\r\n    type: 'public' | 'private' | 'chained';\r\n}\r\n\r\n// taken from \"@iobroker/js-controller-common-db/build/lib/common/notificationHandler\"\r\nexport type MultilingualObject = Exclude<ioBroker.StringOrTranslated, string>;\r\nexport type Severity = 'info' | 'notify' | 'alert';\r\nexport interface NotificationMessageObject {\r\n    message: string;\r\n    ts: number;\r\n}\r\n\r\nexport interface FilteredNotificationInformation {\r\n    [scope: string]: {\r\n        description: MultilingualObject;\r\n        name: MultilingualObject;\r\n        categories: {\r\n            [category: string]: {\r\n                description: MultilingualObject;\r\n                name: MultilingualObject;\r\n                severity: Severity;\r\n                instances: {\r\n                    [instance: string]: {\r\n                        messages: NotificationMessageObject[];\r\n                    };\r\n                };\r\n            };\r\n        };\r\n    };\r\n}\r\n\r\nfunction parseCertificate(name: string, cert: string): Certificate | void {\r\n    if (!cert) {\r\n        return;\r\n    }\r\n\r\n    let type: Certificate['type'];\r\n    // If it is a filename, it could be everything\r\n    if (cert.length < 700 && (cert.indexOf('/') !== -1 || cert.indexOf('\\\\') !== -1)) {\r\n        if (name.toLowerCase().includes('private')) {\r\n            type = 'private';\r\n        } else if (cert.toLowerCase().includes('private')) {\r\n            type = 'private';\r\n        } else if (name.toLowerCase().includes('public')) {\r\n            type = 'public';\r\n        } else if (cert.toLowerCase().includes('public')) {\r\n            type = 'public';\r\n        } else if (name.toLowerCase().includes('chain')) {\r\n            type = 'chained';\r\n        } else if (cert.toLowerCase().includes('chain')) {\r\n            type = 'chained';\r\n        } else {\r\n            // TODO: is this correct?\r\n            return;\r\n        }\r\n    } else {\r\n        type =\r\n            cert.substring(0, '-----BEGIN RSA PRIVATE KEY'.length) === '-----BEGIN RSA PRIVATE KEY' ||\r\n            cert.substring(0, '-----BEGIN PRIVATE KEY'.length) === '-----BEGIN PRIVATE KEY'\r\n                ? 'private'\r\n                : 'public';\r\n\r\n        if (type === 'public') {\r\n            const m = cert.split('-----END CERTIFICATE-----');\r\n            if (m.filter(t => t.replace(/\\r\\n|\\r|\\n/, '').trim()).length > 1) {\r\n                type = 'chained';\r\n            }\r\n        }\r\n    }\r\n    return { name, type };\r\n}\r\n\r\nexport interface IPAddress {\r\n    name: string;\r\n    address: string;\r\n    family: 'ipv4' | 'ipv6';\r\n    internal?: boolean;\r\n}\r\n\r\ninterface IPAddresses {\r\n    IPs4: IPAddress[];\r\n    IPs6: IPAddress[];\r\n}\r\n\r\nfunction parseIPAddresses(host: ioBroker.HostObject): IPAddresses {\r\n    const IPs4: IPAddress[] = [\r\n        {\r\n            name: '[IPv4] 0.0.0.0 - Listen on all IPs',\r\n            address: '0.0.0.0',\r\n            family: 'ipv4',\r\n        },\r\n    ];\r\n    const IPs6: IPAddress[] = [\r\n        {\r\n            name: '[IPv6] :: - Listen on all IPs',\r\n            address: '::',\r\n            family: 'ipv6',\r\n        },\r\n    ];\r\n    if (host.native?.hardware?.networkInterfaces) {\r\n        const list: Record<string, { family: 'IPv6' | 'IPv4'; address: string }[]> =\r\n            host.native?.hardware?.networkInterfaces;\r\n\r\n        Object.keys(list).forEach(inter => {\r\n            list[inter].forEach(ip => {\r\n                if (ip.family !== 'IPv6') {\r\n                    IPs4.push({\r\n                        name: `[${ip.family}] ${ip.address} - ${inter}`,\r\n                        address: ip.address,\r\n                        family: 'ipv4',\r\n                    });\r\n                } else {\r\n                    IPs6.push({\r\n                        name: `[${ip.family}] ${ip.address} - ${inter}`,\r\n                        address: ip.address,\r\n                        family: 'ipv6',\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    return { IPs4, IPs6 };\r\n}\r\n\r\nexport class AdminConnection extends Connection<AdminListenEvents, AdminEmitEvents> {\r\n    constructor(props: ConnectionProps) {\r\n        super(props);\r\n    }\r\n\r\n    // We overload the request method here because the admin connection's methods all have `requireAdmin: true`\r\n    protected request<T>(options: RequestOptions<T>): Promise<T> {\r\n        return super.request<T>({ requireAdmin: true, ...options });\r\n    }\r\n\r\n    /**\r\n     * Get the stored certificates.\r\n     *\r\n     * @param update Force update.\r\n     */\r\n    getCertificates(update?: boolean): Promise<Certificate[]> {\r\n        return this.request({\r\n            cacheKey: 'cert',\r\n            forceUpdate: update,\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: async resolve => {\r\n                const obj = await this.getObject('system.certificates');\r\n                if (obj?.native?.certificates) {\r\n                    resolve(\r\n                        Object.entries<string>(obj.native.certificates)\r\n                            .map(([name, cert]) => parseCertificate(name, cert))\r\n                            .filter((cert): cert is Certificate => !!cert),\r\n                    );\r\n                } else {\r\n                    resolve([]);\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the logs from a host (only for admin connection).\r\n     */\r\n    getLogs(host: string, linesNumber: number = 200): Promise<(string | number)[] | string | { error: string }> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: resolve => {\r\n                this._socket.emit('sendToHost', host, 'getLogs', linesNumber || 200, (lines: any) => {\r\n                    resolve(lines);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Upgrade adapter with webserver.\r\n     */\r\n    upgradeAdapterWithWebserver(\r\n        host: string,\r\n        options: {\r\n            version: string;\r\n            adapterName: string;\r\n            port: number;\r\n            useHttps?: boolean;\r\n            certPublicName?: string;\r\n            certPrivateName?: string;\r\n        },\r\n    ): Promise<{ result: boolean }> {\r\n        return this.request({\r\n            commandTimeout: false,\r\n            executor: resolve => {\r\n                this._socket.emit(\r\n                    'sendToHost',\r\n                    host,\r\n                    'upgradeAdapterWithWebserver',\r\n                    options as any,\r\n                    (result: unknown) => {\r\n                        resolve(result as { result: boolean });\r\n                    },\r\n                );\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Upgrade controller\r\n     */\r\n    upgradeController(host: string, version: string, adminInstance: number): Promise<string> {\r\n        return this.request({\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit(\r\n                    'sendToHost',\r\n                    host,\r\n                    'upgradeController',\r\n                    {\r\n                        version,\r\n                        adminInstance,\r\n                    } as any,\r\n                    (result: unknown) => {\r\n                        const _result = result as {\r\n                            result: string;\r\n                            error?: string;\r\n                        };\r\n                        if (_result.error) {\r\n                            reject(_result.error);\r\n                        } else {\r\n                            resolve(_result.result);\r\n                        }\r\n                    },\r\n                );\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read licenses from ioBroker.net anew\r\n     */\r\n    updateLicenses(\r\n        /** login for ioBroker.net */\r\n        login: string,\r\n        /** password for ioBroker.net */\r\n        password: string,\r\n    ): Promise<License[] | undefined> {\r\n        return this.request({\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('updateLicenses', login, password, (err, licenses?: License[]) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(licenses);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Upgrade controller\r\n     */\r\n    upgradeOsPackages(\r\n        host: string,\r\n        packages: { name: string; version?: string }[],\r\n        restart?: boolean,\r\n    ): Promise<{ success: boolean; error?: string }> {\r\n        return this.request({\r\n            commandTimeout: false,\r\n            executor: resolve => {\r\n                this._socket.emit(\r\n                    'sendToHost',\r\n                    host,\r\n                    'upgradeOsPackages',\r\n                    {\r\n                        packages,\r\n                        restart: !!restart,\r\n                    } as any,\r\n                    (result: unknown) => {\r\n                        resolve(result as { success: boolean; error?: string });\r\n                    },\r\n                );\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the log files (only for admin connection).\r\n     */\r\n    getLogsFiles(host: string): Promise<LogFile[]> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('readLogs', host, (err, files) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve(files!);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete the logs from a host (only for admin connection).\r\n     */\r\n    delLogs(host: string): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('sendToHost', host, 'delLogs', null, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve();\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete a file of an adapter.\r\n     *\r\n     * @param adapter The adapter name.\r\n     * @param fileName The file name.\r\n     */\r\n    deleteFile(adapter: string, fileName: string): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('deleteFile', adapter, fileName, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve();\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete a folder of an adapter.\r\n     *\r\n     * @param adapter The adapter name.\r\n     * @param folderName The folder name.\r\n     */\r\n    deleteFolder(adapter: string, folderName: string): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('deleteFolder', adapter, folderName, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve();\r\n                });\r\n            },\r\n        });\r\n    }\r\n    /**\r\n     * Rename file or folder in ioBroker DB\r\n     *\r\n     * @param adapter instance name\r\n     * @param oldName current file name, e.g., main/vis-views.json\r\n     * @param newName new file name, e.g., main/vis-views-new.json\r\n     */\r\n    rename(adapter: string, oldName: string, newName: string): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('rename', adapter, oldName, newName, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve();\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Rename file in ioBroker DB\r\n     *\r\n     * @param adapter instance name\r\n     * @param oldName current file name, e.g., main/vis-views.json\r\n     * @param newName new file name, e.g., main/vis-views-new.json\r\n     */\r\n    renameFile(adapter: string, oldName: string, newName: string): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('renameFile', adapter, oldName, newName, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve();\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the list of all hosts.\r\n     *\r\n     * @param update Force update.\r\n     */\r\n    getHosts(update?: boolean): Promise<ioBroker.HostObject[]> {\r\n        return this.request({\r\n            cacheKey: 'hosts',\r\n            forceUpdate: update,\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit(\r\n                    'getObjectView',\r\n                    'system',\r\n                    'host',\r\n                    { startkey: 'system.host.', endkey: 'system.host.\\u9999' },\r\n                    (err, doc) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                        } else {\r\n                            resolve(getObjectViewResultToArray<ioBroker.HostObject>(doc));\r\n                        }\r\n                    },\r\n                );\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the list of all users.\r\n     *\r\n     * @param update Force update.\r\n     */\r\n    getUsers(update?: boolean): Promise<ioBroker.UserObject[]> {\r\n        return this.request({\r\n            cacheKey: 'users',\r\n            forceUpdate: update,\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit(\r\n                    'getObjectView',\r\n                    'system',\r\n                    'user',\r\n                    { startkey: 'system.user.', endkey: 'system.user.\\u9999' },\r\n                    (err, doc) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                        } else {\r\n                            resolve(getObjectViewResultToArray<ioBroker.UserObject>(doc));\r\n                        }\r\n                    },\r\n                );\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Rename a group.\r\n     *\r\n     * @param id The id.\r\n     * @param newId The new id.\r\n     * @param newName The new name.\r\n     */\r\n    renameGroup(id: string, newId: string, newName: ioBroker.StringOrTranslated): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: async resolve => {\r\n                const groups = await this.getGroups(true);\r\n                // renaming a group happens by re-creating the object under a different ID\r\n                const subGroups = groups.filter(g => g._id.startsWith(`${id}.`));\r\n                // First, do this for all sub-groups\r\n                for (const group of subGroups) {\r\n                    const oldGroupId = group._id;\r\n                    const newGroupId = (newId + group._id.substring(id.length)) as ioBroker.ObjectIDs.Group;\r\n                    group._id = newGroupId;\r\n\r\n                    // Create a new object, then delete the old one if it worked\r\n                    await this.setObject(newGroupId, group);\r\n                    await this.delObject(oldGroupId);\r\n                }\r\n                // Then for the parent group\r\n                const parentGroup = groups.find(g => g._id === id);\r\n                if (parentGroup) {\r\n                    const oldGroupId = parentGroup._id;\r\n                    parentGroup._id = newId as ioBroker.ObjectIDs.Group;\r\n                    if (newName !== undefined) {\r\n                        (parentGroup.common as any) ??= {};\r\n                        parentGroup.common.name = newName as any;\r\n                    }\r\n\r\n                    // Create a new object, then delete the old one if it worked\r\n                    await this.setObject(newId, parentGroup);\r\n                    await this.delObject(oldGroupId);\r\n                }\r\n\r\n                resolve();\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the host information.\r\n     *\r\n     * @param host host name\r\n     * @param update Force update.\r\n     * @param timeoutMs optional read timeout.\r\n     */\r\n    getHostInfo(host: string, update?: boolean, timeoutMs?: number): Promise<any> {\r\n        host = normalizeHostId(host);\r\n        return this.request({\r\n            cacheKey: `hostInfo_${host}`,\r\n            forceUpdate: update,\r\n            commandTimeout: timeoutMs,\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('sendToHost', host, 'getHostInfo', null, data => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (data === ERRORS.PERMISSION_ERROR) {\r\n                        reject('May not read \"getHostInfo\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getHostInfo\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the host information (short version).\r\n     *\r\n     * @param host host name\r\n     * @param update Force update.\r\n     * @param timeoutMs optional read timeout.\r\n     */\r\n    getHostInfoShort(host: string, update?: boolean, timeoutMs?: number): Promise<any> {\r\n        host = normalizeHostId(host);\r\n        return this.request({\r\n            cacheKey: `hostInfoShort_${host}`,\r\n            forceUpdate: update,\r\n            commandTimeout: timeoutMs,\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('sendToHost', host, 'getHostInfoShort', null, data => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (data === ERRORS.PERMISSION_ERROR) {\r\n                        reject('May not read \"getHostInfoShort\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getHostInfoShort\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the repository.\r\n     *\r\n     * @param host The host name.\r\n     * @param args The arguments.\r\n     * @param update Force update.\r\n     * @param timeoutMs timeout in ms.\r\n     */\r\n    getRepository(\r\n        host: string,\r\n        args?: { update?: boolean; repo?: string | string[] } | string | null,\r\n        update?: boolean,\r\n        timeoutMs?: number,\r\n    ): Promise<any> {\r\n        return this.request({\r\n            cacheKey: `repository_${host}`,\r\n            forceUpdate: update,\r\n            commandTimeout: timeoutMs,\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('sendToHost', host, 'getRepository', args, data => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (data === ERRORS.PERMISSION_ERROR) {\r\n                        reject('May not read \"getRepository\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getRepository\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the installed.\r\n     *\r\n     * @param host The host name.\r\n     * @param update Force update.\r\n     * @param cmdTimeout timeout in ms\r\n     */\r\n    getInstalled(host: string, update?: boolean, cmdTimeout?: number): Promise<any> {\r\n        host = normalizeHostId(host);\r\n\r\n        return this.request({\r\n            cacheKey: `installed_${host}`,\r\n            forceUpdate: update,\r\n            commandTimeout: cmdTimeout,\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('sendToHost', host, 'getInstalled', null, data => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (data === ERRORS.PERMISSION_ERROR) {\r\n                        reject('May not read \"getInstalled\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getInstalled\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Execute a command on a host.\r\n     */\r\n    cmdExec(\r\n        /** The host name. */\r\n        host: string,\r\n        /** The command to execute. */\r\n        cmd: string,\r\n        /** The command ID. */\r\n        cmdId: number,\r\n        /** Timeout of command in ms */\r\n        cmdTimeout?: number,\r\n    ): Promise<void> {\r\n        return this.request({\r\n            commandTimeout: cmdTimeout,\r\n            executor: (resolve, reject, timeout) => {\r\n                host = normalizeHostId(host);\r\n\r\n                this._socket.emit('cmdExec', host, cmdId, cmd, err => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve();\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read the base settings of a given host.\r\n     *\r\n     * @param host The host name.\r\n     */\r\n    readBaseSettings(host: string): Promise<{ config?: ioBroker.IoBrokerJson; isActive?: boolean }> {\r\n        // Make sure we deal with a hostname, not an object ID\r\n        host = objectIdToHostname(host);\r\n\r\n        return this.request({\r\n            requireFeatures: ['CONTROLLER_READWRITE_BASE_SETTINGS'],\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('sendToHost', host, 'readBaseSettings', null, data => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n\r\n                    if (data === ERRORS.PERMISSION_ERROR) {\r\n                        reject('May not read \"BaseSettings\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"BaseSettings\"');\r\n                    } else if ((data as { error?: string }).error) {\r\n                        reject(new Error((data as { error?: string }).error));\r\n                    } else {\r\n                        resolve(data as { config: ioBroker.IoBrokerJson; isActive: boolean });\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Write the base settings of a given host.\r\n     *\r\n     * @param host The host name.\r\n     * @param config The configuration to write.\r\n     */\r\n    writeBaseSettings(host: string, config: ioBroker.IoBrokerJson): Promise<{ error?: any; result?: 'ok' }> {\r\n        // Make sure we deal with a hostname, not an object ID\r\n        host = objectIdToHostname(host);\r\n\r\n        return this.request({\r\n            requireFeatures: ['CONTROLLER_READWRITE_BASE_SETTINGS'],\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('sendToHost', host, 'writeBaseSettings', config, data => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n\r\n                    if (data === ERRORS.PERMISSION_ERROR) {\r\n                        reject('May not write \"BaseSettings\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot write \"BaseSettings\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Send command to restart the iobroker on host\r\n     *\r\n     * @param host The host name.\r\n     */\r\n    restartController(host: string): Promise<true> {\r\n        // Make sure we deal with a hostname, not an object ID\r\n        host = objectIdToHostname(host);\r\n\r\n        return this.request({\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('sendToHost', host, 'restartController', null, () => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    resolve(true);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read statistics information from host\r\n     *\r\n     * @param host The host name.\r\n     * @param typeOfDiag one of none, normal, no-city, extended\r\n     */\r\n    getDiagData(host: string, typeOfDiag: string): Promise<Record<string, any> | null> {\r\n        // Make sure we deal with a hostname, not an object ID\r\n        host = objectIdToHostname(host);\r\n\r\n        return this.request({\r\n            executor: (resolve, _reject, timeout) => {\r\n                this._socket.emit('sendToHost', host, 'getDiagData', typeOfDiag, result => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (!result) {\r\n                        resolve(null);\r\n                    } else {\r\n                        resolve(result as Promise<Record<string, any>>);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Change the password of the given user.\r\n     *\r\n     * @param user The user name.\r\n     * @param password The new password.\r\n     */\r\n    changePassword(user: string, password: string): Promise<void> {\r\n        return this.request({\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('changePassword', user, password, err => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve();\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the IP addresses of the given host.\r\n     *\r\n     * @param host The host name.\r\n     * @param update Force update.\r\n     */\r\n    getIpAddresses(host: string, update?: boolean): Promise<string[]> {\r\n        host = normalizeHostId(host);\r\n        return this.request({\r\n            cacheKey: `IPs_${host}`,\r\n            forceUpdate: update,\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: async resolve => {\r\n                const obj = await this.getObject(host);\r\n                resolve(obj?.common.address ?? []);\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the IP addresses with interface names of the given host or find host by IP.\r\n     *\r\n     * @param ipOrHostName The IP address or host name.\r\n     * @param update Force update.\r\n     */\r\n    getHostByIp(ipOrHostName: string, update?: boolean): Promise<IPAddress[]> {\r\n        // Make sure we deal with a hostname, not an object ID\r\n        ipOrHostName = objectIdToHostname(ipOrHostName);\r\n\r\n        return this.request({\r\n            cacheKey: `rIPs_${ipOrHostName}`,\r\n            forceUpdate: update,\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('getHostByIp', ipOrHostName, (ip, host) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n\r\n                    const { IPs4, IPs6 } = parseIPAddresses(host);\r\n                    resolve([...IPs4, ...IPs6]);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Encrypt a text\r\n     *\r\n     * @param plaintext The text to encrypt.\r\n     */\r\n    encrypt(plaintext: string): Promise<string> {\r\n        return this.request({\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('encrypt', plaintext, (err, ciphertext) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve(ciphertext!);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Decrypt a text\r\n     *\r\n     * @param ciphertext The text to decrypt.\r\n     */\r\n    decrypt(ciphertext: string): Promise<string> {\r\n        return this.request({\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('decrypt', ciphertext, (err, plaintext) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve(plaintext!);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Change access rights for file\r\n     *\r\n     * @param adapter adapter name\r\n     * @param path file name with a full path. It could be like 'vis.0/*'\r\n     * @param options like {mode: 0x644}\r\n     * @param options.mode The new mode for the file\r\n     */\r\n    chmodFile(\r\n        adapter: string | null,\r\n        path: string,\r\n        options?: { mode: number | string },\r\n    ): Promise<ioBroker.ChownFileResult[]> {\r\n        return this.request({\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('chmodFile', adapter, path, options, (err, processed) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve(processed!);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Change an owner or/and owner group for file\r\n     *\r\n     * @param adapter adapter name\r\n     * @param filename file name with a full path. it could be like vis.0/*\r\n     * @param options like {owner: \"newOwner\", ownerGroup: \"newGroup\"}\r\n     * @param options.owner The new owner for the file\r\n     * @param options.ownerGroup The new owner group for the file\r\n     */\r\n    chownFile(\r\n        adapter: string,\r\n        filename: string,\r\n        options?: { owner?: string; ownerGroup?: string },\r\n    ): Promise<ioBroker.ChownFileResult[]> {\r\n        return this.request({\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('chownFile', adapter, filename, options, (err, processed) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve(processed!);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the alarm notifications from a host (only for admin connection).\r\n     *\r\n     * @param host The host name.\r\n     * @param category - optional\r\n     */\r\n    getNotifications(host: string, category?: string): Promise<void | { result: FilteredNotificationInformation }> {\r\n        return this.request({\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('sendToHost', host, 'getNotifications', { category }, notifications => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    resolve(\r\n                        notifications as {\r\n                            result: FilteredNotificationInformation;\r\n                        },\r\n                    );\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clear the alarm notifications on a host (only for admin connection).\r\n     *\r\n     * @param host The host name.\r\n     * @param category - optional\r\n     */\r\n    clearNotifications(host: string, category: string): Promise<any> {\r\n        return this.request({\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('sendToHost', host, 'clearNotifications', { category }, notifications => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    resolve(notifications);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read if only easy mode is allowed (only for admin connection).\r\n     */\r\n    getIsEasyModeStrict(): Promise<boolean> {\r\n        return this.request({\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('getIsEasyModeStrict', (err, isStrict) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve(!!isStrict);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read easy mode configuration (only for admin connection).\r\n     */\r\n    getEasyMode(): Promise<{\r\n        strict: boolean;\r\n        configs: {\r\n            id: string;\r\n            title: ioBroker.StringOrTranslated;\r\n            desc: ioBroker.StringOrTranslated;\r\n            color: string;\r\n            url: string;\r\n            icon: string;\r\n            materialize: boolean;\r\n            jsonConfig: boolean;\r\n            version: string;\r\n        }[];\r\n    }> {\r\n        return this.request({\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('getEasyMode', (err, config) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n\r\n                    timeout.clearTimeout();\r\n\r\n                    if (err) {\r\n                        reject(new Error(err));\r\n                    } else {\r\n                        resolve(\r\n                            config as {\r\n                                strict: boolean;\r\n                                configs: {\r\n                                    id: string;\r\n                                    title: ioBroker.StringOrTranslated;\r\n                                    desc: ioBroker.StringOrTranslated;\r\n                                    color: string;\r\n                                    url: string;\r\n                                    icon: string;\r\n                                    materialize: boolean;\r\n                                    jsonConfig: boolean;\r\n                                    version: string;\r\n                                }[];\r\n                            },\r\n                        );\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read adapter ratings\r\n     */\r\n    getRatings(update?: boolean): Promise<{\r\n        [adapterName: string]: {\r\n            rating: {\r\n                r: number;\r\n                c: number;\r\n            };\r\n            [versionNumber: string]: {\r\n                r: number;\r\n                c: number;\r\n            };\r\n        };\r\n    }> {\r\n        return this.request({\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('getRatings', !!update, (err, ratings) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (err) {\r\n                        reject(new Error(err));\r\n                    } else {\r\n                        resolve(\r\n                            ratings as {\r\n                                [adapterName: string]: {\r\n                                    rating: {\r\n                                        r: number;\r\n                                        c: number;\r\n                                    };\r\n                                    [versionNumber: string]: {\r\n                                        r: number;\r\n                                        c: number;\r\n                                    };\r\n                                };\r\n                            },\r\n                        );\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    getCurrentSession(cmdTimeout?: number): any {\r\n        const controller = new AbortController();\r\n\r\n        return this.request({\r\n            commandTimeout: cmdTimeout || 5000,\r\n            onTimeout: () => {\r\n                controller.abort();\r\n            },\r\n            executor: async (resolve, reject, timeout) => {\r\n                try {\r\n                    const res = await fetch('./session', {\r\n                        signal: controller.signal,\r\n                    });\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    resolve(res.json());\r\n                } catch (e) {\r\n                    reject(`getCurrentSession: ${e}`);\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read current web, socketio or admin namespace, like admin.0\r\n     */\r\n    getCurrentInstance(): Promise<string> {\r\n        return this.request({\r\n            cacheKey: 'currentInstance',\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('getCurrentInstance', (err, namespace) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve(namespace!);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get all instances of the given adapter or get all instances.\r\n     *\r\n     * @param adapter The name of the adapter.\r\n     * @param update Force update.\r\n     */\r\n    getAdapterInstances(adapter?: string | boolean, update?: boolean): Promise<ioBroker.InstanceObject[]> {\r\n        let adapterStr: string;\r\n        if (typeof adapter === 'boolean') {\r\n            update = adapter;\r\n            adapterStr = '';\r\n        } else {\r\n            adapterStr = adapter || '';\r\n        }\r\n\r\n        return this.request({\r\n            cacheKey: `instances_${adapterStr}`,\r\n            forceUpdate: update,\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('getAdapterInstances', adapterStr, (err, instances) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve(instances!);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get adapters with the given name or get all adapters.\r\n     *\r\n     * @param adapter The name of the adapter.\r\n     * @param update Force update.\r\n     */\r\n    getAdapters(adapter?: string | boolean, update?: boolean): Promise<ioBroker.AdapterObject[]> {\r\n        let adapterStr: string;\r\n        if (typeof adapter === 'boolean') {\r\n            update = adapter;\r\n            adapterStr = '';\r\n        } else {\r\n            adapterStr = adapter || '';\r\n        }\r\n\r\n        return this.request({\r\n            cacheKey: `adapter_${adapterStr}`,\r\n            forceUpdate: update,\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('getAdapters', adapterStr, (err, adapters) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve(adapters!);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    // returns very optimized information for adapters to minimize a connection load\r\n    getCompactAdapters(update?: boolean): Promise<Record<string, CompactAdapterInfo>> {\r\n        return this.request({\r\n            cacheKey: 'compactAdapters',\r\n            forceUpdate: update,\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('getCompactAdapters', (err, adapters) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve(adapters!);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    // reset cached promise, so next time the information will be requested anew\r\n    getAdaptersResetCache(adapter?: string): void {\r\n        adapter = adapter ?? '';\r\n        this.resetCache(`adapter_${adapter}`);\r\n        this.resetCache(`compactAdapters`);\r\n    }\r\n\r\n    // returns very optimized information for adapters to minimize a connection load\r\n    getCompactInstances(update?: boolean): Promise<Record<string, CompactInstanceInfo>> {\r\n        return this.request({\r\n            cacheKey: 'compactInstances',\r\n            forceUpdate: update,\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('getCompactInstances', (err, instances) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve(instances!);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    // reset cached promise, so next time the information will be requested anew\r\n    getAdapterInstancesResetCache(adapter?: string): void {\r\n        adapter = adapter ?? '';\r\n        this.resetCache(`instances_${adapter}`);\r\n        this.resetCache(`compactInstances`);\r\n    }\r\n\r\n    // returns very optimized information for adapters to minimize a connection load\r\n    // reads only a version of installed adapter\r\n    getCompactInstalled(host: string, update?: boolean, cmdTimeout?: number): Promise<CompactInstalledInfo> {\r\n        host = normalizeHostId(host);\r\n\r\n        return this.request({\r\n            cacheKey: `installedCompact_${host}`,\r\n            forceUpdate: update,\r\n            commandTimeout: cmdTimeout,\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('getCompactInstalled', host, data => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n\r\n                    if (data === ERRORS.PERMISSION_ERROR) {\r\n                        reject('May not read \"getCompactInstalled\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getCompactInstalled\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    // reset cached promise, so next time the information will be requested anew\r\n    getInstalledResetCache(host?: string): void {\r\n        if (!host) {\r\n            this.resetCache(`installedCompact_`, true);\r\n            this.resetCache(`installed_`, true);\r\n        } else {\r\n            this.resetCache(`installedCompact_${host}`);\r\n            this.resetCache(`installed_${host}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the repository in compact form (only version and icon).\r\n     *\r\n     * @param host The host name.\r\n     * @param update Force update.\r\n     * @param timeoutMs timeout in ms.\r\n     */\r\n    getCompactRepository(host: string, update?: boolean, timeoutMs?: number): Promise<CompactRepository> {\r\n        host = normalizeHostId(host);\r\n\r\n        return this.request({\r\n            cacheKey: `repositoryCompact_${host}`,\r\n            forceUpdate: update,\r\n            commandTimeout: timeoutMs,\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('getCompactRepository', host, data => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n\r\n                    if (data === ERRORS.PERMISSION_ERROR) {\r\n                        reject('May not read \"getCompactRepository\"');\r\n                    } else if (!data) {\r\n                        reject('Cannot read \"getCompactRepository\"');\r\n                    } else {\r\n                        resolve(data);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    // reset cached promise, so next time the information will be requested anew\r\n    getRepositoryResetCache(host: string): void {\r\n        if (!host) {\r\n            this.resetCache(`repositoryCompact_`, true);\r\n            this.resetCache(`repository_`, true);\r\n        } else {\r\n            this.resetCache(`repositoryCompact_${host}`);\r\n            this.resetCache(`repository_${host}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the list of all hosts in compact form (only _id, common.name, common.icon, common.color, native.hardware.networkInterfaces)\r\n     *\r\n     * @param update Force update.\r\n     */\r\n    getCompactHosts(update?: boolean): Promise<CompactHost[]> {\r\n        return this.request({\r\n            cacheKey: 'hostsCompact',\r\n            forceUpdate: update,\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('getCompactHosts', (err, compactHostsInfo) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve(compactHostsInfo!);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get `system.repository` without big JSON\r\n     */\r\n    getCompactSystemRepositories(update?: boolean): Promise<CompactSystemRepository> {\r\n        return this.request({\r\n            cacheKey: 'repositoriesCompact',\r\n            forceUpdate: update,\r\n            executor: (resolve, reject, timeout) => {\r\n                this._socket.emit('getCompactSystemRepositories', (err, systemRepositories) => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n                    if (err) {\r\n                        reject(err);\r\n                    }\r\n                    resolve(systemRepositories!);\r\n                });\r\n            },\r\n        });\r\n    }\r\n}\r\n"]}