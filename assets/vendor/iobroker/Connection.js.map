{"version":3,"file":"Connection.js","sourceRoot":"","sources":["../../src/Connection.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ConnectionProps, LogMessage } from './ConnectionProps.js';\r\nimport { createDeferredPromise } from './DeferredPromise.js';\r\nimport type { EmitEventHandler, ListenEventHandler, SocketClient } from './SocketClient.js';\r\nimport { getObjectViewResultToArray, normalizeHostId, pattern2RegEx, wait } from './tools.js';\r\n\r\n/** Possible progress states. */\r\nexport enum PROGRESS {\r\n    /** The socket is connecting. */\r\n    CONNECTING = 0,\r\n    /** The socket is successfully connected. */\r\n    CONNECTED = 1,\r\n    /** All objects are loaded. */\r\n    OBJECTS_LOADED = 2,\r\n    /** The socket is ready for use. */\r\n    READY = 3,\r\n}\r\n\r\nexport enum ERRORS {\r\n    PERMISSION_ERROR = 'permissionError',\r\n    NOT_CONNECTED = 'notConnectedError',\r\n    TIMEOUT = 'timeout',\r\n    NOT_ADMIN = 'Allowed only in admin',\r\n    NOT_SUPPORTED = 'Not supported',\r\n}\r\n\r\n/** @deprecated Use {@link ERRORS.PERMISSION_ERROR} instead */\r\nexport const PERMISSION_ERROR = ERRORS.PERMISSION_ERROR;\r\n/** @deprecated Use {@link ERRORS.NOT_CONNECTED} instead */\r\nexport const NOT_CONNECTED = ERRORS.NOT_CONNECTED;\r\n\r\n// Options to use for the backend request wrapper\r\n/**\r\n * @internal\r\n */\r\nexport interface RequestOptions<T> {\r\n    /** The key that is used to cache the results for later requests of the same kind */\r\n    cacheKey?: string;\r\n    /** Used to bypass the cache */\r\n    forceUpdate?: boolean;\r\n    /** Can be used to identify the request method in error messages */\r\n    requestName?: string;\r\n    /**\r\n     * The timeout in milliseconds after which the call will reject with a timeout error.\r\n     * If no timeout is given, the default is used. Set this to `false` to explicitly disable the timeout.\r\n     */\r\n    commandTimeout?: number | false;\r\n    /** Will be called when the timeout elapses */\r\n    onTimeout?: () => void;\r\n    /** Whether the call should only be allowed in the admin adapter */\r\n    requireAdmin?: boolean;\r\n    /** Require certain features to be supported for this call */\r\n    requireFeatures?: string[];\r\n    /** The function that does the actual work */\r\n    executor: (\r\n        resolve: (value: T | PromiseLike<T> | Promise<T>) => void,\r\n        reject: (reason?: any) => void,\r\n        /** Can be used to check in the executor whether the request has timed out and/or stop it from timing out */\r\n        timeout: Readonly<{ elapsed: boolean; clearTimeout: () => void }>,\r\n    ) => void | Promise<void>;\r\n}\r\n\r\nexport type BinaryStateChangeHandler = (id: string, base64: string | null) => void;\r\n\r\nexport type FileChangeHandler = (\r\n    id: string,\r\n    fileName: string,\r\n    size: number | null, // null if deleted\r\n) => void;\r\n\r\nexport interface OldObject {\r\n    _id: string;\r\n    type: string;\r\n}\r\n\r\nexport type ObjectChangeHandler = (\r\n    id: string,\r\n    obj: ioBroker.Object | null | undefined,\r\n    oldObj?: OldObject,\r\n) => void | Promise<void>;\r\n\r\nexport type InstanceMessageCallback = (data: any, sourceInstance: string, messageType: string) => void | Promise<void>;\r\n\r\nexport type InstanceSubscribe = {\r\n    messageType: string;\r\n    callback: InstanceMessageCallback;\r\n};\r\n\r\nconst ADAPTERS = ['material', 'echarts', 'vis'];\r\n\r\nexport class Connection<\r\n    CustomListenEvents extends Record<keyof CustomListenEvents, ListenEventHandler> = Record<string, never>,\r\n    CustomEmitEvents extends Record<keyof CustomEmitEvents, EmitEventHandler> = Record<string, never>,\r\n> {\r\n    constructor(props: Partial<ConnectionProps>) {\r\n        this.props = this.applyDefaultProps(props);\r\n\r\n        this.waitForSocketLib()\r\n            .then(() => this.startSocket())\r\n            .catch(e => {\r\n                alert(`Socket connection could not be initialized: ${e}`);\r\n            });\r\n    }\r\n\r\n    private applyDefaultProps(props: Partial<ConnectionProps>): ConnectionProps {\r\n        return {\r\n            ...props,\r\n            // Define default props that always need to be set\r\n            protocol: props.protocol || window.location.protocol,\r\n            host: props.host || window.location.hostname,\r\n            port: props.port || (window.location.port === '3000' ? 8081 : window.location.port),\r\n            ioTimeout: Math.max(props.ioTimeout || 20000, 20000),\r\n            cmdTimeout: Math.max(props.cmdTimeout || 5000, 5000),\r\n            admin5only: props.admin5only || false,\r\n            autoSubscribes: props.autoSubscribes ?? [],\r\n            autoSubscribeLog: props.autoSubscribeLog ?? false,\r\n            doNotLoadACL: props.doNotLoadACL ?? true,\r\n            doNotLoadAllObjects: props.doNotLoadAllObjects ?? true,\r\n        };\r\n    }\r\n\r\n    private readonly props: ConnectionProps;\r\n\r\n    private ignoreState: string = '';\r\n    private connected: boolean = false;\r\n    private subscribed: boolean = false;\r\n    private firstConnect: boolean = true;\r\n    public waitForRestart: boolean = false;\r\n    public loaded: boolean = false;\r\n    private simStates: Record<string, ioBroker.State> = {};\r\n\r\n    private readonly statesSubscribes: Record<\r\n        string,\r\n        {\r\n            reg: RegExp;\r\n            cbs: (ioBroker.StateChangeHandler | BinaryStateChangeHandler)[];\r\n        }\r\n    > = {};\r\n    private readonly filesSubscribes: Record<\r\n        string,\r\n        {\r\n            regId: RegExp;\r\n            regFilePattern: RegExp;\r\n            cbs: FileChangeHandler[];\r\n        }\r\n    > = {};\r\n    private readonly objectsSubscribes: Record<string, { reg: RegExp; cbs: ObjectChangeHandler[] }> = {};\r\n    private objects: Record<string, ioBroker.Object> = {};\r\n    private states: Record<string, ioBroker.State> = {};\r\n\r\n    public acl: any = null;\r\n    public isSecure: boolean = false;\r\n    // Do not inform about readiness two times\r\n    public onReadyDone: boolean = false;\r\n\r\n    private readonly onConnectionHandlers: ((connected: boolean) => void)[] = [];\r\n    private readonly onLogHandlers: ((message: LogMessage) => void)[] = [];\r\n\r\n    private onCmdStdoutHandler?: (id: string, text: string) => void;\r\n    private onCmdStderrHandler?: (id: string, text: string) => void;\r\n    private onCmdExitHandler?: (id: string, exitCode: number) => void;\r\n    private onError(error: any): void {\r\n        (this.props.onError ?? console.error)(error);\r\n    }\r\n\r\n    /** The socket instance */\r\n    protected _socket!: SocketClient<CustomListenEvents, CustomEmitEvents>;\r\n\r\n    private _waitForSocketPromise?: Promise<void>;\r\n    private readonly _waitForFirstConnectionPromise = createDeferredPromise();\r\n\r\n    /** array with all subscriptions to instances */\r\n    private _instanceSubscriptions: Record<string, InstanceSubscribe[]> = {};\r\n\r\n    /** Cache for server requests */\r\n    private readonly _promises: Record<string, Promise<any>> = {};\r\n\r\n    protected _authTimer: any;\r\n\r\n    protected _systemConfig?: ioBroker.SystemConfigObject;\r\n    /** The \"system.config\" object */\r\n    public get systemConfig(): Readonly<ioBroker.SystemConfigObject> | undefined {\r\n        return this._systemConfig;\r\n    }\r\n\r\n    /** System language. It could be changed during runtime */\r\n    public systemLang: ioBroker.Languages = 'en';\r\n\r\n    /**\r\n     * Checks if this connection is running in a web adapter and not in an admin.\r\n     *\r\n     * @returns True if running in a web adapter or in a socketio adapter.\r\n     */\r\n    static isWeb(): boolean {\r\n        return window.socketUrl !== undefined;\r\n    }\r\n\r\n    private waitForSocketLib(): Promise<void> {\r\n        // Only wait once\r\n        if (this._waitForSocketPromise) {\r\n            return this._waitForSocketPromise;\r\n        }\r\n\r\n        // eslint-disable-next-line no-async-promise-executor\r\n        this._waitForSocketPromise = new Promise(async (resolve, reject) => {\r\n            // If socket io is not yet loaded, we need to wait for it\r\n            if (typeof window.io === 'undefined' && typeof window.iob === 'undefined') {\r\n                // If the registerSocketOnLoad function is defined in index.html,\r\n                // we can use it to know when the socket library was loaded\r\n                if (typeof window.registerSocketOnLoad === 'function') {\r\n                    window.registerSocketOnLoad(() => resolve());\r\n                } else {\r\n                    // otherwise, we need to poll\r\n                    for (let i = 1; i <= 30; i++) {\r\n                        if (window.io || window.iob) {\r\n                            return resolve();\r\n                        }\r\n                        await wait(100);\r\n                    }\r\n\r\n                    reject(new Error('Socket library could not be loaded!'));\r\n                }\r\n            } else {\r\n                resolve();\r\n            }\r\n        });\r\n        return this._waitForSocketPromise;\r\n    }\r\n\r\n    /**\r\n     * Starts the socket.io connection.\r\n     */\r\n    async startSocket(): Promise<void> {\r\n        if (this._socket) {\r\n            return;\r\n        }\r\n\r\n        let host = this.props.host;\r\n        let port = this.props.port;\r\n        let protocol = (this.props.protocol || window.location.protocol).replace(':', '');\r\n        let path = window.location.pathname;\r\n\r\n        if (window.location.hostname === 'iobroker.net' || window.location.hostname === 'iobroker.pro') {\r\n            path = '';\r\n        } else {\r\n            // if web adapter, socket io could be on another port or even host\r\n            if (window.socketUrl) {\r\n                const parsed = new URL(window.socketUrl);\r\n                host = parsed.hostname;\r\n                port = parsed.port;\r\n                protocol = parsed.protocol.replace(':', '');\r\n            }\r\n            // get a current path\r\n            const pos = path.lastIndexOf('/');\r\n            if (pos !== -1) {\r\n                path = path.substring(0, pos + 1);\r\n            }\r\n\r\n            if (Connection.isWeb()) {\r\n                // remove one level, like echarts, vis, .... We have here: '/echarts/'\r\n                const parts = path.split('/');\r\n                if (parts.length > 2) {\r\n                    parts.pop();\r\n                    parts.pop();\r\n                    // material can have paths like this '/material/1.3.0/', so remove one more level\r\n                    if (ADAPTERS.includes(parts[parts.length - 1])) {\r\n                        parts.pop();\r\n                    }\r\n                    path = parts.join('/');\r\n                    if (!path.endsWith('/')) {\r\n                        path += '/';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const url = port ? `${protocol}://${host}:${port}` : `${protocol}://${host}`;\r\n\r\n        this._socket = (window.io || window.iob).connect(url, {\r\n            path: path.endsWith('/') ? `${path}socket.io` : `${path}/socket.io`,\r\n            query: 'ws=true',\r\n            name: this.props.name,\r\n            timeout: this.props.ioTimeout,\r\n            uuid: this.props.uuid,\r\n            token: this.props.token,\r\n        });\r\n\r\n        this._socket.on('connect', noTimeout => {\r\n            this.onReadyDone = false;\r\n            // If the user is not admin, it takes some time to install the handlers, because all rights must be checked\r\n            if (noTimeout !== true) {\r\n                this.connected = true;\r\n                setTimeout(\r\n                    () =>\r\n                        this.getVersion()\r\n                            .then(info => {\r\n                                const [major, minor, patch] = info.version.split('.');\r\n                                const v = parseInt(major, 10) * 10000 + parseInt(minor, 10) * 100 + parseInt(patch, 10);\r\n                                if (v < 40102) {\r\n                                    this._authTimer = null;\r\n                                    // possible this is an old version of admin\r\n                                    this.onPreConnect(false, false);\r\n                                } else {\r\n                                    this._socket.emit('authenticate', (isOk, isSecure) =>\r\n                                        this.onPreConnect(isOk, isSecure),\r\n                                    );\r\n                                }\r\n                            })\r\n                            .catch(e =>\r\n                                this.onError({\r\n                                    message: e.toString(),\r\n                                    operation: 'getVersion',\r\n                                }),\r\n                            ),\r\n                    500,\r\n                );\r\n            } else {\r\n                // iobroker websocket waits, till all handlers are installed\r\n                this._socket.emit('authenticate', (isOk, isSecure) => {\r\n                    this.onPreConnect(isOk, isSecure);\r\n                });\r\n            }\r\n        });\r\n\r\n        this._socket.on('reconnect', () => {\r\n            this.onReadyDone = false;\r\n            this.props.onProgress?.(PROGRESS.READY);\r\n            this.connected = true;\r\n\r\n            if (this.waitForRestart) {\r\n                window.location.reload();\r\n            } else {\r\n                this._subscribe(true);\r\n                this.onConnectionHandlers.forEach(cb => cb(true));\r\n            }\r\n        });\r\n\r\n        this._socket.on('disconnect', () => {\r\n            this.onReadyDone = false;\r\n            this.connected = false;\r\n            this.subscribed = false;\r\n            this.props.onProgress?.(PROGRESS.CONNECTING);\r\n            this.onConnectionHandlers.forEach(cb => cb(false));\r\n        });\r\n\r\n        this._socket.on('reauthenticate', () => this.authenticate());\r\n\r\n        this._socket.on('log', (message: LogMessage) => {\r\n            this.props.onLog?.(message);\r\n            this.onLogHandlers.forEach(cb => cb(message));\r\n        });\r\n\r\n        this._socket.on('error', (err: any) => {\r\n            let _err: string;\r\n\r\n            if (err == undefined) {\r\n                _err = '';\r\n            } else if (typeof err.toString === 'function') {\r\n                _err = err.toString();\r\n            } else {\r\n                _err = JSON.stringify(err);\r\n                console.error(`Received strange error: ${_err}`);\r\n            }\r\n\r\n            if (_err.includes('User not authorized')) {\r\n                this.authenticate();\r\n            } else if (_err.includes('websocket error')) {\r\n                console.error(`Socket Error => reload: ${err}`);\r\n                window.location.reload();\r\n            } else {\r\n                console.error(`Socket Error: ${err}`);\r\n            }\r\n        });\r\n\r\n        this._socket.on('connect_error', (err: any) => console.error(`Connect error: ${err}`));\r\n\r\n        this._socket.on('permissionError', err =>\r\n            this.onError({\r\n                message: 'no permission',\r\n                operation: err.operation,\r\n                type: err.type,\r\n                id: err.id || '',\r\n            }),\r\n        );\r\n\r\n        this._socket.on('objectChange', (id, obj) => {\r\n            setTimeout(() => this.objectChange(id, obj), 0);\r\n        });\r\n\r\n        this._socket.on('stateChange', (id, state) => {\r\n            setTimeout(() => this.stateChange(id, state), 0);\r\n        });\r\n\r\n        // instance message\r\n        this._socket.on('im', (messageType, from, data) => {\r\n            setTimeout(() => this.instanceMessage(messageType, from, data), 0);\r\n        });\r\n\r\n        this._socket.on('fileChange', (id, fileName, size) => {\r\n            setTimeout(() => this.fileChange(id, fileName, size), 0);\r\n        });\r\n\r\n        this._socket.on('cmdStdout', (id, text) => {\r\n            this.onCmdStdoutHandler?.(id, text);\r\n        });\r\n\r\n        this._socket.on('cmdStderr', (id, text) => {\r\n            this.onCmdStderrHandler?.(id, text);\r\n        });\r\n\r\n        this._socket.on('cmdExit', (id, exitCode) => {\r\n            this.onCmdExitHandler?.(id, exitCode);\r\n        });\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     */\r\n    private onPreConnect(_isOk: boolean, isSecure: boolean): void {\r\n        if (this._authTimer) {\r\n            clearTimeout(this._authTimer);\r\n            this._authTimer = null;\r\n        }\r\n\r\n        this.connected = true;\r\n        this.isSecure = isSecure;\r\n\r\n        if (this.waitForRestart) {\r\n            window.location.reload();\r\n        } else {\r\n            if (this.firstConnect) {\r\n                void this.loadData().catch(e => console.error(`Cannot load data: ${e}`));\r\n            } else {\r\n                this.props.onProgress?.(PROGRESS.READY);\r\n            }\r\n\r\n            this._subscribe(true);\r\n            this.onConnectionHandlers.forEach(cb => cb(true));\r\n        }\r\n\r\n        this._waitForFirstConnectionPromise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Checks if running in ioBroker cloud\r\n     */\r\n    static isCloud(): boolean {\r\n        if (window.location.hostname.includes('amazonaws.com') || window.location.hostname.includes('iobroker.in')) {\r\n            return true;\r\n        }\r\n        if (typeof window.socketUrl === 'undefined') {\r\n            return false;\r\n        }\r\n        return window.socketUrl.includes('iobroker.in') || window.socketUrl.includes('amazonaws');\r\n    }\r\n\r\n    /**\r\n     * Checks if the socket is connected.\r\n     *\r\n     * @returns true if connected.\r\n     */\r\n    isConnected(): boolean {\r\n        return this.connected;\r\n    }\r\n\r\n    /**\r\n     * Returns a promise which is resolved when the socket is connected.\r\n     */\r\n    waitForFirstConnection(): Promise<void> {\r\n        return this._waitForFirstConnectionPromise;\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     */\r\n    private async getUserPermissions(): Promise<any> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('getUserPermissions', (err, acl) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(acl);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /** Loads the important data and retries a couple of times if it takes too long */\r\n    private async loadData(): Promise<void> {\r\n        if (this.loaded) {\r\n            return;\r\n        }\r\n        const maxAttempts = 10;\r\n        for (let i = 1; i <= maxAttempts; i++) {\r\n            void this.doLoadData().catch(e => console.error(`Cannot load data: ${e}`));\r\n            if (this.loaded) {\r\n                return;\r\n            }\r\n            // give more time via remote connection\r\n            await wait(Connection.isCloud() ? 5000 : 1000);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called after the socket is connected. Loads the necessary data.\r\n     */\r\n    private async doLoadData(): Promise<void> {\r\n        if (this.loaded) {\r\n            return;\r\n        }\r\n\r\n        // Load ACL if not disabled\r\n        if (!this.props.doNotLoadACL) {\r\n            try {\r\n                this.acl = await this.getUserPermissions();\r\n            } catch (e) {\r\n                this.onError(`Cannot read user permissions: ${e}`);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Load system config if not disabled\r\n        try {\r\n            if (\r\n                this.props.admin5only &&\r\n                !Connection.isWeb() &&\r\n                (!window.vendorPrefix || window.vendorPrefix === '@@vendorPrefix@@')\r\n            ) {\r\n                this._systemConfig = await this.getCompactSystemConfig();\r\n            } else {\r\n                this._systemConfig = await this.getSystemConfig();\r\n            }\r\n        } catch (e) {\r\n            this.onError(`Cannot read system config: ${e}`);\r\n            return;\r\n        }\r\n\r\n        // Detect the system language\r\n        if (this._systemConfig) {\r\n            this.systemLang = this._systemConfig.common?.language;\r\n            if (!this.systemLang) {\r\n                this.systemLang = (window.navigator.userLanguage || window.navigator.language) as any;\r\n                // Browsers may report languages like \"de-DE\", \"en-US\", etc.\r\n                // ioBroker expects \"de\", \"en\", ...\r\n                if (/^(en|de|ru|pt|nl|fr|it|es|pl|uk)-?/.test(this.systemLang)) {\r\n                    this.systemLang = this.systemLang.substring(0, 2) as any;\r\n                } else if (!/^(en|de|ru|pt|nl|fr|it|es|pl|uk|zh-cn)$/.test(this.systemLang)) {\r\n                    this.systemLang = 'en';\r\n                }\r\n                this._systemConfig.common.language = this.systemLang;\r\n            }\r\n        }\r\n        this.props.onLanguage?.(this.systemLang);\r\n\r\n        // We are now connected\r\n        this.loaded = true;\r\n        this.props.onProgress?.(PROGRESS.CONNECTED);\r\n        this.firstConnect = false;\r\n\r\n        // Load all objects if desired\r\n        if (!this.props.doNotLoadAllObjects) {\r\n            this.objects = await this.getObjects();\r\n        } else if (this.props.admin5only) {\r\n            this.objects = {};\r\n        } else {\r\n            this.objects = { 'system.config': this._systemConfig };\r\n        }\r\n\r\n        this.props.onProgress?.(PROGRESS.READY);\r\n        if (!this.onReadyDone) {\r\n            this.onReadyDone = true;\r\n            this.props.onReady?.(this.objects);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     */\r\n    private authenticate(): void {\r\n        if (window.location.search.includes('&href=')) {\r\n            window.location.href = `${window.location.protocol}//${window.location.host}${window.location.pathname}${window.location.search}${window.location.hash}`;\r\n        } else {\r\n            window.location.href = `${window.location.protocol}//${window.location.host}${window.location.pathname}?login&href=${window.location.search}${window.location.hash}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribe to the changes of the given state.\r\n     * In compare to the subscribeObject method,\r\n     * this method calls the handler with the current state value immediately after subscribing.\r\n     *\r\n     * @param id The ioBroker state ID or array of state IDs.\r\n     * @param binary Set to true if the given state is binary and requires Base64 decoding.\r\n     * @param cb The callback.\r\n     */\r\n    subscribeState(id: string | string[], binary: true, cb: BinaryStateChangeHandler): Promise<void>;\r\n\r\n    subscribeState(id: string | string[], binary: false, cb: ioBroker.StateChangeHandler): Promise<void>;\r\n\r\n    subscribeState(id: string | string[], cb: ioBroker.StateChangeHandler): Promise<void>;\r\n\r\n    async subscribeState(\r\n        ...args:\r\n            | [id: string | string[], binary: true, cb: BinaryStateChangeHandler]\r\n            | [id: string | string[], binary: false, cb: ioBroker.StateChangeHandler]\r\n            | [id: string | string[], cb: ioBroker.StateChangeHandler]\r\n    ): Promise<void> {\r\n        let id: string | string[];\r\n        let binary: boolean;\r\n        let cb: ioBroker.StateChangeHandler | BinaryStateChangeHandler;\r\n        if (args.length === 3) {\r\n            [id, binary, cb] = args;\r\n        } else {\r\n            [id, cb] = args;\r\n            binary = false;\r\n        }\r\n        let ids: string[];\r\n        if (!Array.isArray(id)) {\r\n            ids = [id];\r\n        } else {\r\n            ids = id;\r\n        }\r\n\r\n        if (typeof cb !== 'function') {\r\n            throw new Error('The state change handler must be a function!');\r\n        }\r\n        const toSubscribe: string[] = [];\r\n        for (let i = 0; i < ids.length; i++) {\r\n            const _id = ids[i];\r\n            if (!this.statesSubscribes[_id]) {\r\n                this.statesSubscribes[_id] = {\r\n                    reg: new RegExp(pattern2RegEx(_id)),\r\n                    cbs: [cb],\r\n                };\r\n                if (id !== this.ignoreState) {\r\n                    toSubscribe.push(_id);\r\n                }\r\n            } else {\r\n                !this.statesSubscribes[_id].cbs.includes(cb) && this.statesSubscribes[_id].cbs.push(cb);\r\n            }\r\n        }\r\n\r\n        if (!this.connected) {\r\n            return;\r\n        }\r\n\r\n        if (toSubscribe.length) {\r\n            // no answer from server required\r\n            this._socket.emit('subscribe', toSubscribe);\r\n        }\r\n\r\n        // Try to get the current value(s) of the state(s) and call the change handlers\r\n        if (binary) {\r\n            let base64: string | undefined;\r\n            for (let i = 0; i < ids.length; i++) {\r\n                try {\r\n                    // binary states are deprecated\r\n                    base64 = await this.getBinaryState(ids[i]);\r\n                } catch (e) {\r\n                    console.error(`Cannot getBinaryState \"${ids[i]}\": ${JSON.stringify(e)}`);\r\n                    base64 = undefined;\r\n                }\r\n                if (base64 != undefined) {\r\n                    (cb as BinaryStateChangeHandler)(ids[i], base64);\r\n                }\r\n            }\r\n        } else if (ids.find(_id => _id.includes('*'))) {\r\n            let states: Record<string, ioBroker.State> | undefined;\r\n            for (let i = 0; i < ids.length; i++) {\r\n                try {\r\n                    states = await this.getForeignStates(ids[i]);\r\n                } catch (e) {\r\n                    console.error(`Cannot getForeignStates \"${ids[i]}\": ${JSON.stringify(e)}`);\r\n                    return;\r\n                }\r\n                if (states) {\r\n                    for (const [id, state] of Object.entries(states)) {\r\n                        const mayBePromise = (cb as ioBroker.StateChangeHandler)(id, state);\r\n                        if (mayBePromise instanceof Promise) {\r\n                            void mayBePromise.catch(e => console.error(`Cannot call state change handler: ${e}`));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            try {\r\n                const states = await (Connection.isWeb() ? this.getStates(ids) : this.getForeignStates(ids));\r\n                if (states) {\r\n                    for (const [id, state] of Object.entries(states)) {\r\n                        const mayBePromise = (cb as ioBroker.StateChangeHandler)(id, state);\r\n                        if (mayBePromise instanceof Promise) {\r\n                            void mayBePromise.catch(e => console.error(`Cannot call state change handler: ${e}`));\r\n                        }\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.error(`Cannot getState \"${ids.join(', ')}\": ${e.message}`);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribe to the changes of the given state and wait for answer.\r\n     *\r\n     * @param id The ioBroker state ID.\r\n     * @param cb The callback.\r\n     */\r\n    async subscribeStateAsync(id: string | string[], cb: ioBroker.StateChangeHandler): Promise<void> {\r\n        return this.subscribeState(id, cb);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes the given callback from changes of the given state.\r\n     *\r\n     * @param id The ioBroker state ID or array of state IDs.\r\n     * @param cb The callback.\r\n     */\r\n    unsubscribeState(id: string | string[], cb?: ioBroker.StateChangeHandler): void {\r\n        let ids: string[];\r\n        if (!Array.isArray(id)) {\r\n            ids = [id];\r\n        } else {\r\n            ids = id;\r\n        }\r\n        const toUnsubscribe = [];\r\n        for (let i = 0; i < ids.length; i++) {\r\n            const _id = ids[i];\r\n\r\n            if (this.statesSubscribes[_id]) {\r\n                const sub = this.statesSubscribes[_id];\r\n                if (cb) {\r\n                    const pos = sub.cbs.indexOf(cb);\r\n                    pos !== -1 && sub.cbs.splice(pos, 1);\r\n                } else {\r\n                    sub.cbs = [];\r\n                }\r\n\r\n                if (!sub.cbs?.length) {\r\n                    delete this.statesSubscribes[_id];\r\n                    if (_id !== this.ignoreState) {\r\n                        toUnsubscribe.push(_id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (this.connected && toUnsubscribe.length) {\r\n            this._socket.emit('unsubscribe', ids);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribe to changes of the given object.\r\n     * In compare to the subscribeState method,\r\n     * this method does not call the handler with the current value immediately after subscribe.\r\n     *\r\n     * the current value.\r\n     *\r\n     * @param id The ioBroker object ID.\r\n     * @param cb The callback.\r\n     */\r\n    subscribeObject(id: string | string[], cb: ObjectChangeHandler): Promise<void> {\r\n        let ids: string[];\r\n        if (!Array.isArray(id)) {\r\n            ids = [id];\r\n        } else {\r\n            ids = id;\r\n        }\r\n\r\n        if (typeof cb !== 'function') {\r\n            throw new Error('The object change handler must be a function!');\r\n        }\r\n\r\n        const toSubscribe: string[] = [];\r\n        for (let i = 0; i < ids.length; i++) {\r\n            const _id = ids[i];\r\n            if (!this.objectsSubscribes[_id]) {\r\n                this.objectsSubscribes[_id] = {\r\n                    reg: new RegExp(pattern2RegEx(_id)),\r\n                    cbs: [cb],\r\n                };\r\n                toSubscribe.push(_id);\r\n            } else {\r\n                !this.objectsSubscribes[_id].cbs.includes(cb) && this.objectsSubscribes[_id].cbs.push(cb);\r\n            }\r\n        }\r\n\r\n        if (this.connected && toSubscribe.length) {\r\n            this._socket.emit('subscribeObjects', toSubscribe);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes all callbacks from changes of the given object.\r\n     *\r\n     * @param id The ioBroker object ID.\r\n     */\r\n    /**\r\n     * Unsubscribes the given callback from changes of the given object.\r\n     *\r\n     * @param id The ioBroker object ID.\r\n     * @param cb The callback.\r\n     */\r\n    unsubscribeObject(id: string | string[], cb?: ObjectChangeHandler): Promise<void> {\r\n        let ids: string[];\r\n        if (!Array.isArray(id)) {\r\n            ids = [id];\r\n        } else {\r\n            ids = id;\r\n        }\r\n        const toUnsubscribe: string[] = [];\r\n        for (let i = 0; i < ids.length; i++) {\r\n            const _id = ids[i];\r\n            if (this.objectsSubscribes[_id]) {\r\n                const sub = this.objectsSubscribes[_id];\r\n                if (cb) {\r\n                    const pos = sub.cbs.indexOf(cb);\r\n                    pos !== -1 && sub.cbs.splice(pos, 1);\r\n                } else {\r\n                    sub.cbs = [];\r\n                }\r\n\r\n                if (!sub.cbs?.length) {\r\n                    delete this.objectsSubscribes[_id];\r\n                    toUnsubscribe.push(_id);\r\n                }\r\n            }\r\n        }\r\n        if (this.connected && toUnsubscribe.length) {\r\n            this._socket.emit('unsubscribeObjects', toUnsubscribe);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     *\r\n     * @param id The ioBroker object ID.\r\n     * @param obj The new object.\r\n     */\r\n    private objectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n        // update main.objects cache\r\n\r\n        // Remember the id and type of th old object\r\n        let oldObj: OldObject | undefined;\r\n        if (this.objects[id]) {\r\n            oldObj = { _id: id, type: this.objects[id].type };\r\n        }\r\n\r\n        let changed = false;\r\n        if (obj) {\r\n            // The object was added, updated or changed\r\n\r\n            // Copy the _rev property (whatever that is)\r\n            if ((obj as any)._rev && this.objects[id]) {\r\n                (this.objects[id] as any)._rev = (obj as any)._rev;\r\n            }\r\n\r\n            // Detect if there was a change\r\n            if (!this.objects[id] || JSON.stringify(this.objects[id]) !== JSON.stringify(obj)) {\r\n                this.objects[id] = obj;\r\n                changed = true;\r\n            }\r\n        } else if (this.objects[id]) {\r\n            // The object was deleted\r\n            delete this.objects[id];\r\n            changed = true;\r\n        }\r\n\r\n        // Notify all subscribed listeners\r\n        for (const [_id, sub] of Object.entries(this.objectsSubscribes)) {\r\n            if (_id === id || sub.reg.test(id)) {\r\n                sub.cbs.forEach(cb => {\r\n                    try {\r\n                        const mayBePromise = cb(id, obj, oldObj);\r\n                        if (mayBePromise instanceof Promise) {\r\n                            void mayBePromise.catch(e => console.error(`Cannot call object change handler: ${e}`));\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(`Error by callback of objectChange: ${e}`);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        // Notify the default listener on change\r\n        if (changed) {\r\n            const mayBePromise = this.props.onObjectChange?.(id, obj);\r\n            if (mayBePromise instanceof Promise) {\r\n                void mayBePromise.catch(e => console.error(`Cannot call object change handler: ${e}`));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     *\r\n     * @param id The ioBroker state ID.\r\n     * @param state The new state value.\r\n     */\r\n    private stateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n        for (const sub of Object.values(this.statesSubscribes)) {\r\n            if (sub.reg.test(id)) {\r\n                for (const cb of sub.cbs) {\r\n                    try {\r\n                        const mayBePromise = cb(id, (state ?? null) as any);\r\n                        if (mayBePromise instanceof Promise) {\r\n                            void mayBePromise.catch(e => console.error(`Cannot call state change handler: ${e}`));\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(`Error by callback of stateChanged: ${e}`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     *\r\n     * @param messageType The message type from the instance\r\n     * @param sourceInstance The source instance\r\n     * @param data The message data\r\n     */\r\n    private instanceMessage(messageType: string, sourceInstance: string, data: any): void {\r\n        this._instanceSubscriptions[sourceInstance]?.forEach(sub => {\r\n            if (sub.messageType === messageType) {\r\n                const mayBePromise = sub.callback(data, sourceInstance, messageType);\r\n                if (mayBePromise instanceof Promise) {\r\n                    void mayBePromise.catch(e => console.error(`Cannot call instance message handler: ${e}`));\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     *\r\n     * @param id The ioBroker object ID of type 'meta'.\r\n     * @param fileName - file name\r\n     * @param size - size of the file\r\n     */\r\n    private fileChange(id: string, fileName: string, size: number | null): void {\r\n        for (const sub of Object.values(this.filesSubscribes)) {\r\n            if (sub.regId.test(id) && sub.regFilePattern.test(fileName)) {\r\n                for (const cb of sub.cbs) {\r\n                    try {\r\n                        cb(id, fileName, size);\r\n                    } catch (e) {\r\n                        console.error(`Error by callback of fileChange: ${e}`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Subscribe to changes of the files.\r\n     *\r\n     * @param id The ioBroker state ID for a \"meta\" object. Could be a pattern\r\n     * @param filePattern Pattern or file name, like 'main/*' or 'main/visViews.json`\r\n     * @param cb The callback.\r\n     */\r\n    async subscribeFiles(id: string, filePattern: string | string[], cb: FileChangeHandler): Promise<void> {\r\n        if (typeof cb !== 'function') {\r\n            throw new Error('The state change handler must be a function!');\r\n        }\r\n\r\n        let filePatterns: string[];\r\n        if (Array.isArray(filePattern)) {\r\n            filePatterns = filePattern;\r\n        } else {\r\n            filePatterns = [filePattern];\r\n        }\r\n\r\n        const toSubscribe = [];\r\n        for (let f = 0; f < filePatterns.length; f++) {\r\n            const pattern = filePatterns[f];\r\n            const key = `${id}$%$${pattern}`;\r\n\r\n            if (!this.filesSubscribes[key]) {\r\n                this.filesSubscribes[key] = {\r\n                    regId: new RegExp(pattern2RegEx(id)),\r\n                    regFilePattern: new RegExp(pattern2RegEx(pattern)),\r\n                    cbs: [cb],\r\n                };\r\n                toSubscribe.push(pattern);\r\n            } else {\r\n                !this.filesSubscribes[key].cbs.includes(cb) && this.filesSubscribes[key].cbs.push(cb);\r\n            }\r\n        }\r\n        if (this.connected && toSubscribe.length) {\r\n            this._socket.emit('subscribeFiles', id, toSubscribe);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes the given callback from changes of files.\r\n     *\r\n     * @param id The ioBroker state ID.\r\n     * @param filePattern Pattern or file name, like 'main/*' or 'main/visViews.json`\r\n     * @param cb The callback.\r\n     */\r\n    unsubscribeFiles(id: string, filePattern: string | string[], cb?: FileChangeHandler): void {\r\n        let filePatterns: string[];\r\n        if (Array.isArray(filePattern)) {\r\n            filePatterns = filePattern;\r\n        } else {\r\n            filePatterns = [filePattern];\r\n        }\r\n        const toUnsubscribe = [];\r\n        for (let f = 0; f < filePatterns.length; f++) {\r\n            const pattern = filePatterns[f];\r\n            const key = `${id}$%$${pattern}`;\r\n            if (this.filesSubscribes[key]) {\r\n                const sub = this.filesSubscribes[key];\r\n                if (cb) {\r\n                    const pos = sub.cbs.indexOf(cb);\r\n                    pos !== -1 && sub.cbs.splice(pos, 1);\r\n                } else {\r\n                    sub.cbs = [];\r\n                }\r\n\r\n                if (!sub.cbs?.length) {\r\n                    delete this.filesSubscribes[key];\r\n                    toUnsubscribe.push(pattern);\r\n                }\r\n            }\r\n        }\r\n        if (this.connected && toUnsubscribe.length) {\r\n            this._socket.emit('unsubscribeFiles', id, toUnsubscribe);\r\n        }\r\n    }\r\n\r\n    /** Requests data from the server or reads it from the cache */\r\n    protected async request<T>({\r\n        cacheKey,\r\n        forceUpdate,\r\n        commandTimeout,\r\n        onTimeout,\r\n        requireAdmin,\r\n        requireFeatures,\r\n        // requestName,\r\n        executor,\r\n    }: RequestOptions<T>): Promise<T> {\r\n        // TODO: mention requestName in errors\r\n\r\n        // If the command requires the admin adapter, enforce it\r\n        if (requireAdmin && Connection.isWeb()) {\r\n            return Promise.reject(new Error(ERRORS.NOT_ADMIN));\r\n        }\r\n\r\n        // Return the cached value if allowed\r\n        if (cacheKey && !forceUpdate && cacheKey in this._promises) {\r\n            return this._promises[cacheKey];\r\n        }\r\n\r\n        // Require the socket to be connected\r\n        if (!this.connected) {\r\n            return Promise.reject(new Error(ERRORS.NOT_CONNECTED));\r\n        }\r\n\r\n        // Check if all required features are supported\r\n        if (requireFeatures?.length) {\r\n            for (const feature of requireFeatures) {\r\n                if (!(await this.checkFeatureSupported(feature))) {\r\n                    throw new Error(ERRORS.NOT_SUPPORTED);\r\n                }\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line no-async-promise-executor\r\n        const promise = new Promise<T>(async (resolve, reject) => {\r\n            const timeoutControl = {\r\n                elapsed: false,\r\n                clearTimeout: () => {\r\n                    // no-op unless there is a timeout\r\n                },\r\n            };\r\n            let timeout: ReturnType<typeof setTimeout> | undefined;\r\n            if (commandTimeout !== false) {\r\n                timeout = setTimeout(() => {\r\n                    timeoutControl.elapsed = true;\r\n                    // Let the caller know that the timeout elapsed\r\n                    onTimeout?.();\r\n\r\n                    // do not cache responses with timeout or no connection\r\n                    if (cacheKey && this._promises[cacheKey] instanceof Promise) {\r\n                        delete this._promises[cacheKey];\r\n                    }\r\n                    reject(new Error(ERRORS.TIMEOUT));\r\n                }, commandTimeout ?? this.props.cmdTimeout);\r\n                timeoutControl.clearTimeout = () => {\r\n                    clearTimeout(timeout);\r\n                };\r\n            }\r\n            // Call the actual function - awaiting it allows us to catch sync and async errors\r\n            // no matter if the executor is async or not\r\n            try {\r\n                await executor(resolve, reject, timeoutControl);\r\n            } catch (e) {\r\n                // do not cache responses with timeout or no connection\r\n                if (cacheKey && this._promises[cacheKey] instanceof Promise) {\r\n                    delete this._promises[cacheKey];\r\n                }\r\n                reject(new Error(e.toString()));\r\n            }\r\n        });\r\n        if (cacheKey) {\r\n            this._promises[cacheKey] = promise;\r\n        }\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Deletes cached promise.\r\n     * So next time the information will be requested anew\r\n     */\r\n    resetCache(key: string, isAll?: boolean): void {\r\n        if (isAll) {\r\n            Object.keys(this._promises)\r\n                .filter(k => k.startsWith(key))\r\n                .forEach(k => {\r\n                    delete this._promises[k];\r\n                });\r\n        } else {\r\n            delete this._promises[key];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all states.\r\n     *\r\n     * @param pattern Pattern of states or array of IDs\r\n     */\r\n    getStates(pattern?: string | string[]): Promise<Record<string, ioBroker.State>> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('getStates', pattern, (err, res) => {\r\n                    this.states = res ?? {};\r\n\r\n                    // if (!disableProgressUpdate) {\r\n                    // \tthis.props.onProgress?.(PROGRESS.STATES_LOADED);\r\n                    // }\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(this.states);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the given state.\r\n     *\r\n     * @param id The state ID.\r\n     */\r\n    getState(id: string): Promise<ioBroker.State | null | undefined> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                if (id && id === this.ignoreState) {\r\n                    resolve(this.simStates[id] || { val: null, ack: true });\r\n                    return;\r\n                }\r\n                this._socket.emit('getState', id, (err, state) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(state);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the given binary state Base64 encoded.\r\n     *\r\n     * @deprecated since js-controller 5.0. Use files instead.\r\n     * @param id The state ID.\r\n     */\r\n    getBinaryState(id: string): Promise<string | undefined> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('getBinaryState', id, (err, state) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(state);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the given binary state.\r\n     *\r\n     * @deprecated since js-controller 5.0. Use files instead.\r\n     * @param id The state ID.\r\n     * @param base64 The Base64 encoded binary data.\r\n     */\r\n    setBinaryState(id: string, base64: string): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('setBinaryState', id, base64, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the given state value.\r\n     *\r\n     * @param id The state ID.\r\n     * @param val The state value.\r\n     * @param ack Acknowledgement flag.\r\n     */\r\n    setState(\r\n        id: string,\r\n        val: ioBroker.State | ioBroker.StateValue | ioBroker.SettableState,\r\n        ack?: boolean,\r\n    ): Promise<void> {\r\n        if (typeof ack === 'boolean') {\r\n            val = { val: val as ioBroker.StateValue, ack };\r\n        }\r\n\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                // extra handling for \"nothing_selected\" state for vis\r\n                if (id && id === this.ignoreState) {\r\n                    let state: ioBroker.State;\r\n\r\n                    if (typeof ack === 'boolean') {\r\n                        state = val as ioBroker.State;\r\n                    } else if (typeof val === 'object' && (val as ioBroker.State).val !== undefined) {\r\n                        state = val as ioBroker.State;\r\n                    } else {\r\n                        state = {\r\n                            val: val as ioBroker.StateValue,\r\n                            ack: false,\r\n                            ts: Date.now(),\r\n                            lc: Date.now(),\r\n                            from: 'system.adapter.vis.0',\r\n                        };\r\n                    }\r\n\r\n                    this.simStates[id] = state;\r\n\r\n                    // inform subscribers about changes\r\n                    if (this.statesSubscribes[id]) {\r\n                        for (const cb of this.statesSubscribes[id].cbs) {\r\n                            try {\r\n                                const mayBePromise = cb(id, state as any);\r\n                                if (mayBePromise instanceof Promise) {\r\n                                    void mayBePromise.catch(e =>\r\n                                        console.error(`Cannot call state change handler: ${e}`),\r\n                                    );\r\n                                }\r\n                            } catch (e) {\r\n                                console.error(`Error by callback of stateChanged: ${e}`);\r\n                            }\r\n                        }\r\n                    }\r\n                    resolve();\r\n                    return;\r\n                }\r\n                this._socket.emit('setState', id, val, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets all objects.\r\n     *\r\n     * @param update Callback that is executed when all objects are retrieved.\r\n     */\r\n    /**\r\n     * Gets all objects.\r\n     *\r\n     * @param update Set to true to retrieve all objects from the server (instead of using the local cache).\r\n     * @param disableProgressUpdate don't call onProgress() when done\r\n     */\r\n    getObjects(update?: boolean, disableProgressUpdate?: boolean): Promise<Record<string, ioBroker.Object>> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                if (!update && this.objects) {\r\n                    resolve(this.objects);\r\n                    return;\r\n                }\r\n\r\n                this._socket.emit(Connection.isWeb() ? 'getObjects' : 'getAllObjects', (err, res) => {\r\n                    if (!disableProgressUpdate) {\r\n                        this.props.onProgress?.(PROGRESS.OBJECTS_LOADED);\r\n                    }\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        this.objects = res ?? {};\r\n                        resolve(this.objects);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the list of objects by ID.\r\n     *\r\n     * @param list array of IDs to retrieve\r\n     */\r\n    getObjectsById(list: string[]): Promise<Record<string, ioBroker.Object> | undefined> {\r\n        return this.request({\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('getObjects', list, (err, res) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(res);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called internally.\r\n     *\r\n     * @param isEnable Set to true if subscribing, false to unsubscribe.\r\n     */\r\n    private _subscribe(isEnable: boolean): void {\r\n        if (isEnable && !this.subscribed) {\r\n            this.subscribed = true;\r\n            if (this.props.autoSubscribes?.length) {\r\n                this._socket.emit('subscribeObjects', this.props.autoSubscribes);\r\n            }\r\n            // re subscribe objects\r\n            const ids = Object.keys(this.objectsSubscribes);\r\n            if (ids.length) {\r\n                this._socket.emit('subscribeObjects', ids);\r\n            }\r\n            Object.keys(this.objectsSubscribes).forEach(id => this._socket.emit('subscribeObjects', id));\r\n            // re-subscribe logs\r\n            this.props.autoSubscribeLog && this._socket.emit('requireLog', true);\r\n            // re subscribe states\r\n            Object.keys(this.statesSubscribes).forEach(id => this._socket.emit('subscribe', id));\r\n            // re-subscribe files\r\n            Object.keys(this.filesSubscribes).forEach(key => {\r\n                const [id, filePattern] = key.split('$%$');\r\n                this._socket.emit('subscribeFiles', id, filePattern);\r\n            });\r\n        } else if (!isEnable && this.subscribed) {\r\n            this.subscribed = false;\r\n            // un-subscribe objects\r\n            if (this.props.autoSubscribes?.length) {\r\n                this._socket.emit('unsubscribeObjects', this.props.autoSubscribes);\r\n            }\r\n            const ids = Object.keys(this.objectsSubscribes);\r\n            if (ids.length) {\r\n                this._socket.emit('unsubscribeObjects', ids);\r\n            }\r\n            // un-subscribe logs\r\n            this.props.autoSubscribeLog && this._socket.emit('requireLog', false);\r\n\r\n            // un-subscribe states\r\n            Object.keys(this.statesSubscribes).forEach(id => this._socket.emit('unsubscribe', id));\r\n            // re-subscribe files\r\n            Object.keys(this.filesSubscribes).forEach(key => {\r\n                const [id, filePattern] = key.split('$%$');\r\n                this._socket.emit('unsubscribeFiles', id, filePattern);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Requests log updates.\r\n     *\r\n     * @param isEnabled Set to true to get logs.\r\n     */\r\n    requireLog(isEnabled: boolean): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('requireLog', isEnabled, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes the given object.\r\n     *\r\n     * @param id The object ID.\r\n     * @param maintenance Force deletion of non conform IDs.\r\n     */\r\n    delObject(id: string, maintenance: boolean = false): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('delObject', id, { maintenance }, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Deletes the given object and all its children.\r\n     *\r\n     * @param id The object ID.\r\n     * @param maintenance Force deletion of non conform IDs.\r\n     */\r\n    delObjects(id: string, maintenance: boolean): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('delObjects', id, { maintenance }, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the object.\r\n     *\r\n     * @param id The object ID.\r\n     * @param obj The object.\r\n     */\r\n    setObject(id: string, obj: ioBroker.SettableObject): Promise<void> {\r\n        if (!obj) {\r\n            return Promise.reject(new Error('Null object is not allowed'));\r\n        }\r\n\r\n        obj = JSON.parse(JSON.stringify(obj));\r\n        delete obj.from;\r\n        delete obj.user;\r\n        delete obj.ts;\r\n\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('setObject', id, obj, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the object with the given id from the server.\r\n     *\r\n     * @param id The object ID.\r\n     * @returns The object.\r\n     */\r\n    getObject<T extends string>(id: T): ioBroker.GetObjectPromise<T> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                if (id && id === this.ignoreState) {\r\n                    resolve({\r\n                        _id: this.ignoreState,\r\n                        type: 'state',\r\n                        common: {\r\n                            name: 'ignored state',\r\n                            type: 'mixed',\r\n                        },\r\n                    } as any);\r\n                    return;\r\n                }\r\n                this._socket.emit('getObject', id, (err, obj) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(obj as any);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a message to a specific instance or all instances of some specific adapter.\r\n     *\r\n     * @param instance The instance to send this message to.\r\n     * @param command Command name of the target instance.\r\n     * @param data The message data to send.\r\n     */\r\n    sendTo<T = any>(instance: string, command: string, data?: any): Promise<T> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: resolve => {\r\n                this._socket.emit('sendTo', instance, command, data, (result: any) => {\r\n                    resolve(result);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Extend an object and create it if it might not exist.\r\n     *\r\n     * @param id The id.\r\n     * @param obj The object.\r\n     */\r\n    extendObject(id: string, obj: ioBroker.PartialObject): Promise<void> {\r\n        if (!obj) {\r\n            return Promise.reject(new Error('Null object is not allowed'));\r\n        }\r\n\r\n        obj = JSON.parse(JSON.stringify(obj));\r\n        delete obj.from;\r\n        delete obj.user;\r\n        delete obj.ts;\r\n\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('extendObject', id, obj, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Register a handler for log messages.\r\n     *\r\n     * @param handler The handler.\r\n     */\r\n    registerLogHandler(handler: (message: LogMessage) => void): void {\r\n        if (!this.onLogHandlers.includes(handler)) {\r\n            this.onLogHandlers.push(handler);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unregister a handler for log messages.\r\n     *\r\n     * @param handler The handler.\r\n     */\r\n    unregisterLogHandler(handler: (message: LogMessage) => void): void {\r\n        const pos = this.onLogHandlers.indexOf(handler);\r\n        pos !== -1 && this.onLogHandlers.splice(pos, 1);\r\n    }\r\n\r\n    /**\r\n     * Register a handler for the connection state.\r\n     *\r\n     * @param handler The handler.\r\n     */\r\n    registerConnectionHandler(handler: (connected: boolean) => void): void {\r\n        if (!this.onConnectionHandlers.includes(handler)) {\r\n            this.onConnectionHandlers.push(handler);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unregister a handler for the connection state.\r\n     *\r\n     * @param handler The handler.\r\n     */\r\n    unregisterConnectionHandler(handler: (connected: boolean) => void): void {\r\n        const pos = this.onConnectionHandlers.indexOf(handler);\r\n        pos !== -1 && this.onConnectionHandlers.splice(pos, 1);\r\n    }\r\n\r\n    /**\r\n     * Set the handler for standard output of a command.\r\n     *\r\n     * @param handler The handler.\r\n     */\r\n    registerCmdStdoutHandler(handler: (id: string, text: string) => void): void {\r\n        this.onCmdStdoutHandler = handler;\r\n    }\r\n\r\n    /**\r\n     * Unset the handler for standard output of a command.\r\n     */\r\n    unregisterCmdStdoutHandler(): void {\r\n        this.onCmdStdoutHandler = undefined;\r\n    }\r\n\r\n    /**\r\n     * Set the handler for standard error of a command.\r\n     *\r\n     * @param handler The handler.\r\n     */\r\n    registerCmdStderrHandler(handler: (id: string, text: string) => void): void {\r\n        this.onCmdStderrHandler = handler;\r\n    }\r\n\r\n    /**\r\n     * Unset the handler for standard error of a command.\r\n     */\r\n    unregisterCmdStderrHandler(): void {\r\n        this.onCmdStderrHandler = undefined;\r\n    }\r\n\r\n    /**\r\n     * Set the handler for exit of a command.\r\n     *\r\n     * @param handler The handler.\r\n     */\r\n    registerCmdExitHandler(handler: (id: string, exitCode: number) => void): void {\r\n        this.onCmdExitHandler = handler;\r\n    }\r\n\r\n    /**\r\n     * Unset the handler for exit of a command.\r\n     */\r\n    unregisterCmdExitHandler(): void {\r\n        this.onCmdExitHandler = undefined;\r\n    }\r\n\r\n    /**\r\n     * Get all enums with the given name.\r\n     *\r\n     * @param _enum The name of the enum, like `rooms` or `functions`\r\n     * @param update Force update.\r\n     */\r\n    getEnums(_enum?: string, update?: boolean): Promise<Record<string, ioBroker.EnumObject>> {\r\n        return this.request({\r\n            cacheKey: `enums_${_enum || 'all'}`,\r\n            forceUpdate: update,\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit(\r\n                    'getObjectView',\r\n                    'system',\r\n                    'enum',\r\n                    {\r\n                        startkey: `enum.${_enum || ''}`,\r\n                        endkey: _enum ? `enum.${_enum}.\\u9999` : `enum.\\u9999`,\r\n                    },\r\n                    (err, res) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                        } else {\r\n                            const _res: Record<string, ioBroker.EnumObject> = {};\r\n                            if (res) {\r\n                                for (let i = 0; i < res.rows.length; i++) {\r\n                                    if (_enum && res.rows[i].id === `enum.${_enum}`) {\r\n                                        continue;\r\n                                    }\r\n                                    _res[res.rows[i].id] = res.rows[i].value as ioBroker.EnumObject;\r\n                                }\r\n                            }\r\n                            resolve(_res);\r\n                        }\r\n                    },\r\n                );\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @deprecated since version 1.1.15, cause parameter order does not match backend\r\n     * Query a predefined object view.\r\n     * @param start The start ID.\r\n     * @param end The end ID.\r\n     * @param type The type of object.\r\n     */\r\n    getObjectView<T extends ioBroker.ObjectType>(\r\n        start: string | undefined,\r\n        end: string | undefined,\r\n        type: T,\r\n    ): Promise<Record<string, ioBroker.AnyObject & { type: T }>> {\r\n        return this.getObjectViewCustom('system', type, start, end);\r\n    }\r\n\r\n    /**\r\n     * Query a predefined object view.\r\n     *\r\n     * @param type The type of object.\r\n     * @param start The start ID.\r\n     * @param [end] The end ID.\r\n     */\r\n    getObjectViewSystem<T extends ioBroker.ObjectType>(\r\n        type: T,\r\n        start?: string,\r\n        end?: string,\r\n    ): Promise<Record<string, ioBroker.AnyObject & { type: T }>> {\r\n        return this.getObjectViewCustom('system', type, start, end);\r\n    }\r\n\r\n    /**\r\n     * Query a predefined object view.\r\n     *\r\n     * @param design design - 'system' or other designs like `custom`.\r\n     * @param type The type of object.\r\n     * @param start The start ID.\r\n     * @param [end] The end ID.\r\n     */\r\n    getObjectViewCustom<T extends ioBroker.ObjectType>(\r\n        design: string,\r\n        type: T,\r\n        start?: string,\r\n        end?: string,\r\n    ): Promise<Record<string, ioBroker.AnyObject & { type: T }>> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                start = start || '';\r\n                end = end || '\\u9999';\r\n\r\n                this._socket.emit('getObjectView', design, type, { startkey: start, endkey: end }, (err, res) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        const _res: Record<string, ioBroker.AnyObject & { type: T }> = {};\r\n                        if (res && res.rows) {\r\n                            for (let i = 0; i < res.rows.length; i++) {\r\n                                _res[res.rows[i].id] = res.rows[i].value;\r\n                            }\r\n                        }\r\n                        resolve(_res);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read the meta items.\r\n     */\r\n    readMetaItems(): Promise<ioBroker.Object[]> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit(\r\n                    'getObjectView',\r\n                    'system',\r\n                    'meta',\r\n                    { startkey: '', endkey: '\\u9999' },\r\n                    (err, objs) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                        } else {\r\n                            resolve(objs!.rows?.map(obj => obj.value).filter((val): val is ioBroker.Object => !!val));\r\n                        }\r\n                    },\r\n                );\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read the directory of an adapter.\r\n     *\r\n     * @param namespace (this may be the adapter name, the instance name or the name of a storage object within the adapter).\r\n     * @param path The directory name.\r\n     */\r\n    readDir(namespace: string | null, path: string): Promise<ioBroker.ReadDirResult[]> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('readDir', namespace, path, (err, files) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(files!);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read a file of an adapter.\r\n     *\r\n     * @param namespace (this may be the adapter name, the instance name or the name of a storage object within the adapter).\r\n     * @param fileName The file name.\r\n     * @param base64 If it must be a base64 format\r\n     */\r\n    readFile(\r\n        namespace: string | null,\r\n        fileName: string,\r\n        base64?: boolean,\r\n    ): Promise<{ file: string; mimeType: string }> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit(base64 ? 'readFile64' : 'readFile', namespace, fileName, (err, data, type) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve({ file: data as string, mimeType: type! });\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Write a file of an adapter.\r\n     *\r\n     * @param namespace (this may be the adapter name, the instance name or the name of a storage object within the adapter).\r\n     * @param fileName The file name.\r\n     * @param data The data (if it's a Buffer, it will be converted to Base64).\r\n     */\r\n    writeFile64(namespace: string, fileName: string, data: ArrayBuffer | string): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                if (typeof data === 'string') {\r\n                    this._socket.emit('writeFile', namespace, fileName, data, err => {\r\n                        if (err) {\r\n                            reject(err);\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    });\r\n                } else {\r\n                    const base64 = btoa(\r\n                        new Uint8Array(data).reduce((data, byte) => data + String.fromCharCode(byte), ''),\r\n                    );\r\n\r\n                    this._socket.emit('writeFile64', namespace, fileName, base64, err => {\r\n                        if (err) {\r\n                            reject(err);\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                    });\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete a file of an adapter.\r\n     *\r\n     * @param namespace (this may be the adapter name, the instance name or the name of a storage object within the adapter).\r\n     * @param fileName The file name.\r\n     */\r\n    deleteFile(namespace: string, fileName: string): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('deleteFile', namespace, fileName, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete a folder of an adapter.\r\n     *\r\n     * @param namespace (this may be the adapter name, the instance name or the name of a storage object within the adapter).\r\n     * @param folderName The folder name.\r\n     */\r\n    deleteFolder(namespace: string, folderName: string): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('deleteFolder', namespace, folderName, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Rename file or folder in ioBroker DB\r\n     *\r\n     * @param namespace (this may be the adapter name, the instance name or the name of a storage object within the adapter).\r\n     * @param oldName current file name, e.g., main/vis-views.json\r\n     * @param newName new file name, e.g., main/vis-views-new.json\r\n     */\r\n    rename(namespace: string, oldName: string, newName: string): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('rename', namespace, oldName, newName, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Rename file in ioBroker DB\r\n     *\r\n     * @param namespace (this may be the adapter name, the instance name or the name of a storage object within the adapter).\r\n     * @param oldName current file name, e.g., main/vis-views.json\r\n     * @param newName new file name, e.g., main/vis-views-new.json\r\n     */\r\n    renameFile(namespace: string, oldName: string, newName: string): Promise<void> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('renameFile', namespace, oldName, newName, err => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Execute a command on a host.\r\n     */\r\n    cmdExec(\r\n        /** Host name */\r\n        host: string,\r\n        /** Command to execute */\r\n        cmd: string,\r\n        /** Command ID */\r\n        cmdId: number,\r\n        /** Timeout of command in ms */\r\n        cmdTimeout?: number,\r\n    ): Promise<void> {\r\n        return this.request({\r\n            commandTimeout: cmdTimeout,\r\n            executor: (resolve, reject, timeout) => {\r\n                host = normalizeHostId(host);\r\n\r\n                this._socket.emit('cmdExec', host, cmdId, cmd, err => {\r\n                    if (timeout.elapsed) {\r\n                        return;\r\n                    }\r\n                    timeout.clearTimeout();\r\n\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the system configuration.\r\n     *\r\n     * @param update Force update.\r\n     */\r\n    getSystemConfig(update?: boolean): Promise<ioBroker.SystemConfigObject> {\r\n        return this.request({\r\n            cacheKey: 'systemConfig',\r\n            forceUpdate: update,\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: async resolve => {\r\n                let systemConfig = await this.getObject('system.config');\r\n                (systemConfig as any) ??= {};\r\n                (systemConfig as any).common ??= {};\r\n                (systemConfig as any).native ??= {};\r\n\r\n                resolve(systemConfig!);\r\n            },\r\n        });\r\n    }\r\n\r\n    // returns very optimized information for adapters to minimize a connection load\r\n    getCompactSystemConfig(update?: boolean): Promise<ioBroker.SystemConfigObject> {\r\n        return this.request({\r\n            cacheKey: 'systemConfigCommon',\r\n            forceUpdate: update,\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            requireAdmin: true,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('getCompactSystemConfig', (err, systemConfig) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        (systemConfig as any) ??= {};\r\n                        (systemConfig as any).common ??= {};\r\n                        (systemConfig as any).native ??= {};\r\n                        resolve(systemConfig!);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read all states (which might not belong to this adapter) which match the given pattern.\r\n     *\r\n     * @param pattern The pattern to match.\r\n     */\r\n    getForeignStates(pattern?: string | string[] | null): ioBroker.GetStatesPromise {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('getForeignStates', pattern || '*', (err, states) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(states ?? {});\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get foreign objects by pattern, by specific type and resolve their enums.\r\n     *\r\n     * @param pattern The pattern to match.\r\n     * @param type The type of the object.\r\n     */\r\n    getForeignObjects<T extends ioBroker.ObjectType>(\r\n        pattern: string | null | undefined,\r\n        type: T,\r\n    ): Promise<Record<string, ioBroker.AnyObject & { type: T }>> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('getForeignObjects', pattern || '*', type, (err, objects) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(objects as any);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the system configuration.\r\n     *\r\n     * @param obj The new system configuration.\r\n     */\r\n    setSystemConfig(obj: ioBroker.SystemConfigObject): Promise<void> {\r\n        return this.setObject('system.config', obj);\r\n    }\r\n\r\n    /**\r\n     * Get the raw socket.io socket.\r\n     */\r\n    getRawSocket(): any {\r\n        return this._socket;\r\n    }\r\n\r\n    /**\r\n     * Get the history of a given state.\r\n     *\r\n     * @param id The state ID.\r\n     * @param options The query options.\r\n     */\r\n    getHistory(id: string, options: ioBroker.GetHistoryOptions): Promise<ioBroker.GetHistoryResult> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('getHistory', id, options, (err, values) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(values!);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the history of a given state.\r\n     *\r\n     * @param id The state ID.\r\n     * @param options The query options.\r\n     */\r\n    getHistoryEx(\r\n        id: string,\r\n        options: ioBroker.GetHistoryOptions,\r\n    ): Promise<{\r\n        values: ioBroker.GetHistoryResult;\r\n        sessionId: number;\r\n        step: number;\r\n    }> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('getHistory', id, options, (err, values, step, sessionId) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve({\r\n                            values: values!,\r\n                            sessionId: sessionId!,\r\n                            step: step!,\r\n                        });\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the IP addresses of the given host.\r\n     *\r\n     * @param host The host name.\r\n     * @param update Force update.\r\n     */\r\n    getIpAddresses(host: string, update?: boolean): Promise<string[]> {\r\n        host = normalizeHostId(host);\r\n        return this.request({\r\n            cacheKey: `IPs_${host}`,\r\n            forceUpdate: update,\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: async resolve => {\r\n                const obj = await this.getObject(host);\r\n                resolve(obj?.common.address ?? []);\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the version.\r\n     */\r\n    getVersion(update?: boolean): Promise<{ version: string; serverName: string }> {\r\n        return this.request({\r\n            cacheKey: 'version',\r\n            forceUpdate: update,\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('getVersion', (err, version, serverName) => {\r\n                    // Old socket.io had no error parameter\r\n                    if (err && !version && typeof err === 'string' && err.match(/\\d+\\.\\d+\\.\\d+/)) {\r\n                        resolve({ version: err, serverName: 'socketio' });\r\n                    } else {\r\n                        if (err) {\r\n                            reject(err);\r\n                        } else {\r\n                            resolve({\r\n                                version: version!,\r\n                                serverName: serverName!,\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the web server name.\r\n     */\r\n    getWebServerName(): Promise<string> {\r\n        return this.request({\r\n            cacheKey: 'webName',\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('getAdapterName', (err, name) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(name!);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if the file exists\r\n     *\r\n     * @param adapter adapter name\r\n     * @param filename file name with the full path. it could be like vis.0/*\r\n     */\r\n    fileExists(adapter: string, filename: string): Promise<boolean> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('fileExists', adapter, filename, (err, exists) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(!!exists);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Read current user\r\n     */\r\n    getCurrentUser(): Promise<string> {\r\n        return this.request({\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: resolve => {\r\n                this._socket.emit('authEnabled', (_isSecure, user) => {\r\n                    resolve(user);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get uuid\r\n     */\r\n    getUuid(): Promise<string> {\r\n        return this.request({\r\n            cacheKey: 'uuid',\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: async resolve => {\r\n                const obj = await this.getObject('system.meta.uuid');\r\n                resolve(obj?.native?.uuid);\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if a given feature is supported.\r\n     *\r\n     * @param feature The feature to check.\r\n     * @param update Force update.\r\n     */\r\n    checkFeatureSupported(feature: string, update?: boolean): Promise<any> {\r\n        return this.request({\r\n            cacheKey: `supportedFeatures_${feature}`,\r\n            forceUpdate: update,\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('checkFeatureSupported', feature, (err, features) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else {\r\n                        resolve(features);\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get all adapter instances.\r\n     *\r\n     * @param update Force update.\r\n     */\r\n    /**\r\n     * Get all instances of the given adapter.\r\n     *\r\n     * @param adapter The name of the adapter.\r\n     * @param update Force update.\r\n     */\r\n    getAdapterInstances(adapter?: string | boolean, update?: boolean): Promise<ioBroker.InstanceObject[]> {\r\n        if (typeof adapter === 'boolean') {\r\n            update = adapter;\r\n            adapter = '';\r\n        }\r\n        adapter = adapter || '';\r\n\r\n        return this.request({\r\n            cacheKey: `instances_${adapter}`,\r\n            forceUpdate: update,\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: async resolve => {\r\n                const startKey = adapter ? `system.adapter.${adapter}.` : 'system.adapter.';\r\n                const endKey = `${startKey}\\u9999`;\r\n\r\n                const instances = await this.getObjectViewSystem('instance', startKey, endKey);\r\n                const instanceObjects = Object.values(instances);\r\n                if (adapter) {\r\n                    resolve(instanceObjects.filter(o => o.common.name === adapter));\r\n                } else {\r\n                    resolve(instanceObjects);\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get adapters with the given name.\r\n     *\r\n     * @param adapter The name of the adapter.\r\n     * @param update Force update.\r\n     */\r\n    getAdapters(adapter?: string, update?: boolean): Promise<ioBroker.AdapterObject[]> {\r\n        if (typeof adapter === 'boolean') {\r\n            update = adapter;\r\n            adapter = '';\r\n        }\r\n        adapter = adapter || '';\r\n\r\n        return this.request({\r\n            cacheKey: `adapter_${adapter}`,\r\n            forceUpdate: update,\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: async resolve => {\r\n                const adapters = await this.getObjectViewSystem(\r\n                    'adapter',\r\n                    `system.adapter.${adapter || ''}`,\r\n                    `system.adapter.${adapter || '\\u9999'}`,\r\n                );\r\n                const adapterObjects = Object.values(adapters);\r\n                if (adapter) {\r\n                    resolve(adapterObjects.filter(o => o.common.name === adapter));\r\n                } else {\r\n                    resolve(adapterObjects);\r\n                }\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the list of all groups.\r\n     *\r\n     * @param update Force update.\r\n     */\r\n    getGroups(update?: boolean): Promise<ioBroker.GroupObject[]> {\r\n        return this.request({\r\n            cacheKey: 'groups',\r\n            forceUpdate: update,\r\n            // TODO: check if this should time out\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit(\r\n                    'getObjectView',\r\n                    'system',\r\n                    'group',\r\n                    {\r\n                        startkey: 'system.group.',\r\n                        endkey: 'system.group.\\u9999',\r\n                    },\r\n                    (err, doc) => {\r\n                        if (err) {\r\n                            reject(err);\r\n                        } else {\r\n                            resolve(getObjectViewResultToArray<ioBroker.GroupObject>(doc));\r\n                        }\r\n                    },\r\n                );\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Logout current user\r\n     */\r\n    logout(): Promise<string | null> {\r\n        return this.request({\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('logout', err => {\r\n                    err ? reject(err) : resolve(null);\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Subscribe on instance message\r\n     *\r\n     * @param targetInstance instance, like 'cameras.0'\r\n     * @param messageType message type like 'startCamera/cam3'\r\n     * @param data optional data object\r\n     * @param callback message handler\r\n     */\r\n    subscribeOnInstance(\r\n        targetInstance: string,\r\n        messageType: string,\r\n        data: any,\r\n        callback: InstanceMessageCallback,\r\n    ): Promise<{\r\n        error?: string;\r\n        accepted?: boolean;\r\n        heartbeat?: number;\r\n    } | null> {\r\n        return this.request({\r\n            commandTimeout: false,\r\n            executor: (resolve, reject) => {\r\n                this._socket.emit('clientSubscribe', targetInstance, messageType, data, (err, subscribeResult) => {\r\n                    if (err) {\r\n                        reject(err);\r\n                    } else if (subscribeResult) {\r\n                        if (subscribeResult.error) {\r\n                            reject(subscribeResult.error);\r\n                        } else {\r\n                            if (!targetInstance.startsWith('system.adapter.')) {\r\n                                targetInstance = `system.adapter.${targetInstance}`;\r\n                            }\r\n                            // save callback\r\n                            this._instanceSubscriptions[targetInstance] =\r\n                                this._instanceSubscriptions[targetInstance] || [];\r\n\r\n                            if (\r\n                                !this._instanceSubscriptions[targetInstance].find(\r\n                                    subscription =>\r\n                                        subscription.messageType === messageType && subscription.callback === callback,\r\n                                )\r\n                            ) {\r\n                                this._instanceSubscriptions[targetInstance].push({\r\n                                    messageType,\r\n                                    callback,\r\n                                });\r\n                            }\r\n                            resolve(subscribeResult);\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from instance message\r\n     *\r\n     * @param targetInstance instance, like 'cameras.0'\r\n     * @param messageType message type like 'startCamera/cam3'\r\n     * @param callback message handler\r\n     */\r\n    unsubscribeFromInstance(\r\n        targetInstance: string,\r\n        messageType: string,\r\n        callback: InstanceMessageCallback,\r\n    ): Promise<boolean> {\r\n        if (!targetInstance.startsWith('system.adapter.')) {\r\n            targetInstance = `system.adapter.${targetInstance}`;\r\n        }\r\n\r\n        let deleted;\r\n        const promiseResults = [];\r\n        do {\r\n            deleted = false;\r\n            const index = this._instanceSubscriptions[targetInstance]?.findIndex(\r\n                sub => (!messageType || sub.messageType === messageType) && (!callback || sub.callback === callback),\r\n            );\r\n\r\n            if (index !== undefined && index !== null && index !== -1) {\r\n                deleted = true;\r\n                // remember messageType\r\n                const _messageType = this._instanceSubscriptions[targetInstance][index].messageType;\r\n\r\n                this._instanceSubscriptions[targetInstance].splice(index, 1);\r\n                if (!this._instanceSubscriptions[targetInstance].length) {\r\n                    delete this._instanceSubscriptions[targetInstance];\r\n                }\r\n\r\n                // try to find another subscription for this instance and messageType\r\n                const found =\r\n                    this._instanceSubscriptions[targetInstance] &&\r\n                    this._instanceSubscriptions[targetInstance].find(sub => sub.messageType === _messageType);\r\n\r\n                if (!found) {\r\n                    promiseResults.push(\r\n                        this.request({\r\n                            commandTimeout: false,\r\n                            executor: (resolve, reject) => {\r\n                                this._socket.emit(\r\n                                    'clientUnsubscribe',\r\n                                    targetInstance,\r\n                                    messageType,\r\n                                    (err, wasSubscribed) => (err ? reject(err) : resolve(wasSubscribed)),\r\n                                );\r\n                            },\r\n                        }),\r\n                    );\r\n                }\r\n            }\r\n        } while (deleted && (!callback || !messageType));\r\n\r\n        if (promiseResults.length) {\r\n            return Promise.all(promiseResults).then(results => !!results.find(result => result));\r\n        }\r\n\r\n        return Promise.resolve(false);\r\n    }\r\n\r\n    /**\r\n     * Send log to ioBroker log\r\n     *\r\n     * @param text Log text\r\n     * @param level `info`, `debug`, `warn`, `error` or `silly`\r\n     */\r\n    log(text: string, level?: string): Promise<null> {\r\n        return text\r\n            ? this.request({\r\n                  commandTimeout: false,\r\n                  executor: resolve => {\r\n                      this._socket.emit('log', text, level);\r\n                      return resolve(null);\r\n                  },\r\n              })\r\n            : Promise.resolve(null);\r\n    }\r\n\r\n    /**\r\n     * This is a special method for vis.\r\n     * It is used to not send to server the changes about \"nothing_selected\" state\r\n     *\r\n     * @param id The state that has to be ignored by communication\r\n     */\r\n    setStateToIgnore(id: string): void {\r\n        this.ignoreState = id;\r\n    }\r\n}\r\n"]}