{"version":3,"file":"SocketEvents.js","sourceRoot":"","sources":["../../src/SocketEvents.ts"],"names":[],"mappings":"","sourcesContent":["import type { ERRORS } from './Connection.js';\r\nimport type { LogMessage } from './ConnectionProps.js';\r\n\r\n/** Defines which events are emitted by the server and can be listened on the client */\r\nexport interface IOListenEvents {\r\n    objectChange: (id: string, obj: ioBroker.Object) => void;\r\n    stateChange: (id: string, obj: ioBroker.State) => void;\r\n    fileChange: (id: string, fileName: string, size: number | null) => void;\r\n    cmdStdout: (id: string, text: string) => void;\r\n    cmdStderr: (id: string, text: string) => void;\r\n    cmdExit: (id: string, exitCode: number) => void;\r\n    im: (messageType: string, from: string, data: any) => void; // message from instance\r\n\r\n    connect: (noTimeout: boolean) => void;\r\n    reconnect: () => void;\r\n    disconnect: () => void;\r\n    reauthenticate: () => void;\r\n\r\n    log: (message: LogMessage) => void;\r\n\r\n    error: (error: Error) => void;\r\n    connect_error: (error: Error) => void;\r\n    permissionError: (error: any) => void; // TODO: check ioBroker.admin/lib/socket.js for the shape of this\r\n}\r\n\r\nexport type GenericCallback<T> = ErrorAsString<ioBroker.GenericCallback<T>>;\r\nexport type ErrorCallback = ErrorAsString<ioBroker.ErrorCallback>;\r\n\r\nexport type AuthenticateCallback = (isOk: boolean, isSecure: boolean) => void;\r\nexport type AuthEnabledCallback = (isSecure: boolean, user: string) => void;\r\nexport type GetUserPermissionsCallback = (err?: string, acl?: any) => void;\r\nexport type SubscribeOnInstanceCallback = (\r\n    error: string | null,\r\n    result?: { error?: string; accepted?: boolean; heartbeat?: number },\r\n) => void;\r\nexport type UnsubscribeFromInstanceCallback = (err: string | null, wasSubscribed: boolean) => void;\r\n\r\nexport type ErrorAsString<T extends (...args: any[]) => void> = T extends (err: Error | null, ...args: infer U) => void\r\n    ? (err: string | null | undefined, ...args: U) => void\r\n    : T extends (err?: Error | null, ...args: infer U) => void\r\n      ? (err: string | null | undefined, ...args: U) => void\r\n      : never;\r\n\r\nexport type GetBinaryStateCallback = (err?: string | null, stateBase64?: string) => void;\r\nexport type ReadFile64Callback = (err?: string | null, file?: string) => void;\r\n\r\nexport type GetVersionCallback = (err?: string | null, version?: string, serverName?: string) => void;\r\n\r\nexport type GetAdapterNameCallback = (err?: string | null, serverName?: string) => void;\r\n\r\nexport type GetHostByIPCallback = (ip: string, host: ioBroker.HostObject) => void;\r\n\r\nexport type GenericCallbackNoExtraError<T> = (result?: ERRORS.PERMISSION_ERROR | T) => void;\r\n\r\nexport interface DelObjectOptions {\r\n    maintenance?: boolean;\r\n    user?: string;\r\n}\r\n\r\nexport interface DelObjectsOptions extends DelObjectOptions {\r\n    recursive?: boolean;\r\n}\r\n\r\nexport interface CompactInstanceInfo {\r\n    adminTab: ioBroker.AdapterCommon['adminTab'];\r\n    name: ioBroker.InstanceCommon['name'];\r\n    icon: ioBroker.InstanceCommon['icon'];\r\n    enabled: ioBroker.InstanceCommon['enabled'];\r\n    version: ioBroker.InstanceCommon['version'];\r\n}\r\n\r\nexport interface CompactAdapterInfo {\r\n    icon: ioBroker.AdapterCommon['icon'];\r\n    v: ioBroker.AdapterCommon['version'];\r\n    iv?: ioBroker.AdapterCommon['ignoreVersion'];\r\n}\r\n\r\nexport type CompactInstalledInfo = Record<\r\n    string,\r\n    {\r\n        version: string;\r\n    }\r\n>;\r\n\r\nexport type CompactRepository = Record<\r\n    string,\r\n    {\r\n        icon: ioBroker.AdapterCommon['icon'];\r\n        version: string;\r\n    }\r\n>;\r\n\r\nexport type CompactHost = {\r\n    _id: ioBroker.HostObject['_id'];\r\n    common: {\r\n        name: ioBroker.HostCommon['name'];\r\n        icon: ioBroker.HostCommon['icon'];\r\n        color: string;\r\n        installedVersion: ioBroker.HostCommon['installedVersion'];\r\n    };\r\n    native: {\r\n        hardware: {\r\n            networkInterfaces?: ioBroker.HostNative['hardware']['networkInterfaces'];\r\n        };\r\n    };\r\n};\r\nexport type CompactSystemRepositoryEntry = {\r\n    link: string;\r\n    hash?: string;\r\n    stable?: boolean;\r\n    json:\r\n        | {\r\n              _repoInfo: {\r\n                  stable?: boolean;\r\n                  name?: ioBroker.StringOrTranslated;\r\n              };\r\n          }\r\n        | null\r\n        | undefined;\r\n};\r\n\r\nexport type CompactSystemRepository = {\r\n    _id: ioBroker.HostObject['_id'];\r\n    common: {\r\n        name: ioBroker.HostCommon['name'];\r\n        dontDelete: boolean;\r\n    };\r\n    native: {\r\n        repositories: Record<string, CompactSystemRepositoryEntry>;\r\n    };\r\n};\r\n\r\nexport interface LogFile {\r\n    fileName: string;\r\n    size: number;\r\n}\r\n\r\nexport interface License {\r\n    id: string;\r\n    product: string;\r\n    time: number;\r\n    uuid: string;\r\n    validTill: string;\r\n    version: string;\r\n    usedBy: string;\r\n    invoice: string;\r\n    json: string;\r\n}\r\n\r\n/** Defines which events are emitted by the client and can be listened on the server */\r\nexport interface IOEmitEvents {\r\n    authenticate(callback: AuthenticateCallback): void;\r\n    authEnabled(callback: AuthEnabledCallback): void;\r\n    getUserPermissions(callback?: GetUserPermissionsCallback): void;\r\n\r\n    requireLog(enabled: boolean, callback?: ErrorCallback): void;\r\n\r\n    subscribe(pattern: string | string[], callback?: ErrorCallback): void;\r\n    unsubscribe(pattern: string | string[], callback?: ErrorCallback): void;\r\n    subscribeObjects(pattern: string | string[], callback?: ErrorCallback): void;\r\n    unsubscribeObjects(pattern: string | string[], callback?: ErrorCallback): void;\r\n    subscribeFiles(id: string, filePattern: string | string[], callback?: ErrorCallback): void;\r\n    unsubscribeFiles(id: string, filePattern: string | string[], callback?: ErrorCallback): void;\r\n\r\n    getObjects(callback?: ErrorAsString<ioBroker.GetObjectsCallback>): void;\r\n    getObjects(list: string[], callback?: ErrorAsString<ioBroker.GetObjectsCallback>): void;\r\n    getAllObjects(callback?: ErrorAsString<ioBroker.GetObjectsCallback>): void;\r\n    getObjectView<Design extends string = string, Search extends string = string>(\r\n        design: Design,\r\n        search: Search,\r\n        params: ioBroker.GetObjectViewParams | null | undefined,\r\n        callback: ErrorAsString<ioBroker.GetObjectViewCallback<ioBroker.InferGetObjectViewItemType<Design, Search>>>,\r\n    ): void;\r\n\r\n    delObject:\r\n        | ((id: string, options: DelObjectOptions, callback?: ErrorAsString<ioBroker.GetObjectsCallback>) => void)\r\n        | ((id: string, callback?: ErrorAsString<ioBroker.GetObjectsCallback>) => void);\r\n    delObjects:\r\n        | ((id: string, options: DelObjectsOptions, callback?: ErrorAsString<ioBroker.GetObjectsCallback>) => void)\r\n        | ((id: string, callback?: ErrorAsString<ioBroker.GetObjectsCallback>) => void);\r\n    setObject(id: string, val: ioBroker.SettableObject, callback?: ErrorCallback): void;\r\n    extendObject(\r\n        id: string,\r\n        objPart: ioBroker.PartialObject,\r\n        callback?: ErrorAsString<ioBroker.SetObjectCallback>,\r\n    ): void;\r\n    getObject(id: string, callback?: ErrorAsString<ioBroker.GetObjectCallback>): void;\r\n    getForeignObjects:\r\n        | ((pattern: string, type: ioBroker.ObjectType, callback: ErrorAsString<ioBroker.GetObjectsCallback>) => void)\r\n        | ((pattern: string, callback: ErrorAsString<ioBroker.GetObjectsCallback>) => void);\r\n\r\n    getStates(pattern?: string | string[], callback?: ErrorAsString<ioBroker.GetStatesCallback>): void;\r\n\r\n    getForeignStates(\r\n        pattern: string | string[] | null | undefined,\r\n        callback?: ErrorAsString<ioBroker.GetStatesCallback>,\r\n    ): void;\r\n\r\n    getState(id: string, callback?: ErrorAsString<ioBroker.GetStateCallback>): void;\r\n    getBinaryState(id: string, callback?: GetBinaryStateCallback): void;\r\n\r\n    setState(\r\n        id: string,\r\n        val: ioBroker.State | ioBroker.StateValue | ioBroker.SettableState,\r\n        callback?: ErrorCallback,\r\n    ): void;\r\n    setBinaryState(id: string, base64: string, callback?: ErrorCallback): void;\r\n\r\n    readDir(adapterName: string | null, path: string, callback: ErrorAsString<ioBroker.ReadDirCallback>): void;\r\n    readFile(adapterName: string | null, path: string, callback: ErrorAsString<ioBroker.ReadFileCallback>): void;\r\n    readFile64(adapterName: string | null, path: string, callback: ReadFile64Callback): void;\r\n    writeFile(adapterName: string | null, path: string, data: string, callback: ErrorCallback): void;\r\n    writeFile64(adapterName: string | null, path: string, dataBase64: string, callback: ErrorCallback): void;\r\n    deleteFile(adapterName: string | null, path: string, callback: ErrorCallback): void;\r\n    deleteFolder(adapterName: string | null, path: string, callback: ErrorCallback): void;\r\n    fileExists(adapterName: string | null, path: string, callback: GenericCallback<boolean>): void;\r\n    renameFile(adapterName: string | null, oldFile: string, newFile: string, callback: ErrorCallback): void;\r\n    rename(adapterName: string | null, oldFile: string, newFile: string, callback: ErrorCallback): void;\r\n\r\n    getHistory(\r\n        id: string,\r\n        options: ioBroker.GetHistoryOptions,\r\n        callback: ErrorAsString<ioBroker.GetHistoryCallback>,\r\n    ): void;\r\n\r\n    getVersion(callback: GetVersionCallback): void;\r\n    getAdapterName(callback: GetAdapterNameCallback): void;\r\n\r\n    getCompactSystemConfig(callback: ErrorAsString<ioBroker.GetObjectCallback<'system.config'>>): void;\r\n    checkFeatureSupported(featureName: string, callback: GenericCallback<boolean>): void;\r\n\r\n    sendTo<T = any>(instance: string, command: string, data?: any, callback?: (result: T) => void): void;\r\n    cmdExec(hostName: string, commandId: number, command: string, callback?: ErrorCallback): void;\r\n\r\n    clientSubscribe(\r\n        targetInstance: string,\r\n        messageType: string,\r\n        data: any,\r\n        callback?: SubscribeOnInstanceCallback,\r\n    ): void;\r\n\r\n    clientUnsubscribe(targetInstance: string, messageType: string, callback?: UnsubscribeFromInstanceCallback): void;\r\n\r\n    logout(callback?: ErrorCallback): void;\r\n\r\n    log(text: string, level?: string): void;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\r\nexport type AdminListenEvents = {};\r\n\r\nexport interface AdminEmitEvents {\r\n    sendToHost<T = any>(hostname: string, command: string, data?: any, callback?: (result: T) => void): void;\r\n\r\n    changePassword(user: string, password: string, callback?: ErrorCallback): void;\r\n\r\n    getHostByIp(ipOrHostName: string, callback: GetHostByIPCallback): void;\r\n\r\n    encrypt(plaintext: string, callback: GenericCallback<string>): void;\r\n    decrypt(ciphertext: string, callback: GenericCallback<string>): void;\r\n\r\n    chmodFile(\r\n        adapter: string | null,\r\n        path: string,\r\n        options?: { mode: number | string },\r\n        callback?: ErrorAsString<ioBroker.ChownFileCallback>,\r\n    ): void;\r\n    chownFile(\r\n        adapter: string | null,\r\n        path: string,\r\n        options?: { owner?: string; ownerGroup?: string },\r\n        callback?: ErrorAsString<ioBroker.ChownFileCallback>,\r\n    ): void;\r\n\r\n    restartController(host: string, callback?: (result: '') => void): void;\r\n\r\n    getIsEasyModeStrict(callback: GenericCallback<boolean>): void;\r\n    getEasyMode(\r\n        callback: GenericCallback<{\r\n            strict: boolean;\r\n            configs: any[];\r\n        }>,\r\n    ): void;\r\n\r\n    // TODO: What's the return type here?\r\n    getRatings(update: boolean, callback: GenericCallback<any>): void;\r\n\r\n    getCurrentInstance(callback: GenericCallback<string>): void;\r\n    getAdapters(adapterName: string | null | undefined, callback: GenericCallback<ioBroker.AdapterObject[]>): void;\r\n    getAdapterInstances(\r\n        adapterName: string | null | undefined,\r\n        callback: GenericCallback<ioBroker.InstanceObject[]>,\r\n    ): void;\r\n    getCompactInstances(callback: GenericCallback<Record<string, CompactInstanceInfo>>): void;\r\n    getCompactAdapters(callback: GenericCallback<Record<string, CompactAdapterInfo>>): void;\r\n    getCompactInstalled(host: string, callback: GenericCallbackNoExtraError<CompactInstalledInfo>): void;\r\n    getCompactRepository(host: string, callback: GenericCallbackNoExtraError<CompactRepository>): void;\r\n    getCompactHosts(callback: GenericCallback<CompactHost[]>): void;\r\n    getCompactSystemRepositories(callback: GenericCallback<CompactSystemRepository>): void;\r\n\r\n    readLogs(host: string, callback: GenericCallback<LogFile[]>): void;\r\n    updateLicenses(login: string, password: string, callback: GenericCallback<License[]>): void;\r\n}\r\n"]}