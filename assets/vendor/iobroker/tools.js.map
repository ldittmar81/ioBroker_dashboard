{"version":3,"file":"tools.js","sourceRoot":"","sources":["../../src/tools.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,0BAA0B,CACtC,GAIe;IAEf,OAAO,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAY,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;AACpF,CAAC;AAED,2DAA2D;AAC3D,MAAM,UAAU,eAAe,CAAC,IAAY;IACxC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,cAAc,CAAC,EAAE,CAAC;QACpC,IAAI,GAAG,eAAe,IAAI,EAAE,CAAC;IACjC,CAAC;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,EAAU;IACzC,IAAI,EAAE,EAAE,UAAU,CAAC,cAAc,CAAC,EAAE,CAAC;QACjC,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;IACD,OAAO,EAAE,CAAC;AACd,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,IAAI,CAAC,EAAU;IAC3B,OAAO,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE;QAC/B,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;AACP,CAAC;AAED,sCAAsC;AACtC,MAAM,UAAU,aAAa,CAAC,OAAe;IACzC,OAAO,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC;IAErC,MAAM,kBAAkB,GAAG,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC;IAC9C,MAAM,gBAAgB,GAAG,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC;IAE7D,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAE/E,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,OAAO,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACrF,CAAC","sourcesContent":["export function getObjectViewResultToArray<T extends ioBroker.Object>(\r\n    doc:\r\n        | {\r\n              rows: ioBroker.GetObjectViewItem<T>[];\r\n          }\r\n        | undefined,\r\n): T[] {\r\n    return doc?.rows.map(item => item.value).filter((val): val is T => !!val) ?? [];\r\n}\r\n\r\n/** Makes sure that a host id starts with \"system.host.\" */\r\nexport function normalizeHostId(host: string): string {\r\n    if (!host?.startsWith('system.host.')) {\r\n        host = `system.host.${host}`;\r\n    }\r\n    return host;\r\n}\r\n\r\nexport function objectIdToHostname(id: string): string {\r\n    if (id?.startsWith('system.host.')) {\r\n        id = id.substring('system.host.'.length);\r\n    }\r\n    return id;\r\n}\r\n\r\n/**\r\n * Creates a promise that waits for the specified time and then resolves\r\n */\r\nexport function wait(ms: number): Promise<void> {\r\n    return new Promise<void>(resolve => {\r\n        setTimeout(resolve, ms);\r\n    });\r\n}\r\n\r\n/** Converts ioB pattern into regex */\r\nexport function pattern2RegEx(pattern: string): string {\r\n    pattern = (pattern || '').toString();\r\n\r\n    const startsWithWildcard = pattern[0] === '*';\r\n    const endsWithWildcard = pattern[pattern.length - 1] === '*';\r\n\r\n    pattern = pattern.replace(/[-/\\\\^$+?.()|[\\]{}]/g, '\\\\$&').replace(/\\*/g, '.*');\r\n\r\n    return (startsWithWildcard ? '' : '^') + pattern + (endsWithWildcard ? '' : '$');\r\n}\r\n"]}