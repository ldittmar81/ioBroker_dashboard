{"version":3,"file":"DeferredPromise.js","sourceRoot":"","sources":["../../src/DeferredPromise.ts"],"names":[],"mappings":"AAKA,MAAM,UAAU,qBAAqB;IACjC,IAAI,GAAwC,CAAC;IAC7C,IAAI,GAA2B,CAAC;IAEhC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QAC/C,GAAG,GAAG,OAAO,CAAC;QACd,GAAG,GAAG,MAAM,CAAC;IACjB,CAAC,CAAuB,CAAC;IAEzB,OAAO,CAAC,OAAO,GAAG,GAAI,CAAC;IACvB,OAAO,CAAC,MAAM,GAAG,GAAI,CAAC;IAEtB,OAAO,OAAO,CAAC;AACnB,CAAC","sourcesContent":["export interface DeferredPromise<T> extends Promise<T> {\r\n    resolve(value: T | PromiseLike<T>): void;\r\n    reject(reason?: any): void;\r\n}\r\n\r\nexport function createDeferredPromise<T = void>(): DeferredPromise<T> {\r\n    let res: (value: T | PromiseLike<T>) => void;\r\n    let rej: (reason?: any) => void;\r\n\r\n    const promise = new Promise<T>((resolve, reject) => {\r\n        res = resolve;\r\n        rej = reject;\r\n    }) as DeferredPromise<T>;\r\n\r\n    promise.resolve = res!;\r\n    promise.reject = rej!;\r\n\r\n    return promise;\r\n}\r\n"]}